using System;
using NUnit.Framework;
using PeterO;
using PeterO.Text;
using Test;

namespace EncodingTest {
  [TestFixture]
  public class Iso2022JPTest {
    [Test]
    public void TestIso2022JPDecoder() {
      byte[] bytes;
      string str;
      ICharacterEncoding charset = Encodings.GetEncoding("iso-2022-jp");
      bytes = new byte[] { 0x79, 0x31, 0x40, 0x40, 0x21, 0x5b, 0x26, 0x1e };
      str = "y1@@![&\u001e";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] { 0x67 };
      str = "g";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x5e, 0x7b, 0x78, 0x30, 0x55, 0x1b, 0x28, 0x4a, 0x42,
        0x1b, 0x28, 0x42, 0x47, 0x6b,
      };
      str = "^\u007bx0UBGk";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x47, 0x51, 0x73, 0x7b, 0x7d, 0x6f, 0x1b, 0x28, 0x48,
        0x4c, 0x47, 0x46, 0x5a,
      };
      str = "GQs\u007b}o\ufffd(HLGFZ";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x1b, 0x28, 0x49, 0x27, 0x48, 0x61, 0x1b, 0x28, 0x48,
        0x1b, 0x28, 0x49, 0x1b, 0x24, 0x40, 0x53, 0x70, 0x58, 0x4d, 0x60, 0x5c,
        0x37, 0x7e, 0x33, 0x29, 0x78, 0x40, 0x1b, 0x24, 0x42, 0x38, 0x4d, 0x7d,
        0x52, 0x44, 0x68, 0x3b, 0x77, 0x62,
      };
      str =

  "\uff67\uff88\ufffd\ufffd\uff68\uff88\ufffd\u56bc\u6177\u737a\u6372\u82a5\ufffd\u6238\ufffd\u5448\u4f3c\ufffd";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x59, 0x24, 0x38, 0x3b, 0x6a, 0x30,
        0x47, 0x1b, 0x28, 0x49, 0x3f, 0x4a, 0x70, 0x3d, 0x3f, 0x47, 0x1b, 0x24,
        0x40, 0x75, 0x2c, 0x49, 0x4d, 0x4d, 0x6b, 0x4b, 0x6d,
      };
      str =

  "\u622e\u6e90\u87b3\ufffd\uff7f\uff8a\ufffd\uff7d\uff7f\uff87\ufffd\u6d5c\u96f7\u6795";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x41, 0x1b, 0x28, 0x42, 0x3f, 0x5e,
        0x69, 0x3f, 0x7e, 0x1b, 0x28, 0x42, 0x2f, 0x52, 0x5a, 0x33, 0x2a, 0x26,
        0x2f, 0x7f, 0x1b, 0x28, 0x49, 0x3c, 0x3f, 0x5a, 0x32, 0x33, 0x7a,
      };
      str = "\ufffd?^i?~/RZ3*&/\u007f\uff7c\uff7f\uff9a\uff72\uff73\ufffd";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x7b, 0x42, 0x30, 0x3f, 0x30, 0x22, 0x52, 0x2a, 0x54,
        0x57, 0x6a, 0x36, 0x3e, 0x36, 0x5b, 0x64, 0x74, 0x78, 0x2a, 0x52,
      };
      str = "\u007bB0?0\"R*TWj6>6[dtx*R";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x7e, 0x15, 0x41, 0x74, 0x6c, 0x27, 0x54, 0x1b, 0x24,
        0x40, 0x31, 0x67, 0x49, 0x41, 0x79, 0x53, 0x43, 0x7a, 0x1b, 0x28, 0x42,
        0x2b, 0x79, 0x30,
      };
      str = "~\u0015Atl'T\u63f4\u63cf\u53dd\u4e01+y0";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] { 0x53 };
      str = "S";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] { 0x4b, 0x65, 0x78 };
      str = "Kex";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] { 0x31, 0x1b, 0x28, 0x4a, 0x71 };
      str = "1q";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x7a, 0x34, 0x66, 0x74, 0x78, 0x33, 0x2e, 0x1b, 0x28,
        0x49,
      };
      str = "z4ftx3.";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x4e, 0x5f, 0x39, 0x76, 0x3b, 0x25, 0x4c, 0x7d, 0x1b,
        0x28, 0x42, 0x77, 0x1b, 0x28, 0x42, 0x5b, 0x3e, 0x5f,
      };
      str = "N_9v;%L}w[>_";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x34, 0x71, 0x6c, 0x50, 0x3e, 0x59, 0x4d, 0x7d, 0x31,
        0x5c, 0x31, 0x1b, 0x28, 0x48, 0x3d, 0x40, 0x1b, 0x24, 0x42, 0x4c, 0x57,
        0x38, 0x4b, 0x39, 0x63, 0x6e, 0x44,
      };
      str = "4qlP>YM}1\\1\ufffd(H\u003d@\u8017\u5eab\u9d3b\u914a";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x36, 0x13, 0x7c, 0x2f, 0x1b, 0x28, 0x49, 0x52, 0x40,
        0x47, 0x24, 0x1b, 0x28, 0x48, 0x27, 0x40, 0x55, 0x24, 0x21, 0x6a, 0x3b,
        0x29, 0x52, 0x52, 0x33, 0x5f, 0x36, 0x4f,
      };
      str =

  "6\u0013|/\uff92\uff80\uff87\uff64\ufffd\uff68\uff88\uff67\uff80\uff95\uff64\uff61\ufffd\uff7b\uff69\uff92\uff92\uff73\uff9f\uff76\uff8f";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x3e, 0x35, 0x77, 0x45, 0x48, 0x1b, 0x28, 0x42, 0x45,
        0x70, 0x57, 0x6f, 0x37, 0x56, 0x1c, 0x4d, 0x67, 0x70, 0x6e, 0x5c, 0x1b,
        0x28, 0x4a, 0x6e, 0x5b, 0x3e, 0x51, 0x1b, 0x28, 0x49, 0x33, 0x76, 0x1b,
        0x24, 0x40, 0x1b, 0x24, 0x42, 0x44,
      };
      str = ">5wEHEpWo7V\u001cMgpn\\n[>Q\uff73\ufffd\ufffd\ufffd";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x78, 0x6b, 0x1a, 0x59, 0x5d, 0x3f, 0x6a, 0x55, 0x51,
        0x1b, 0x24, 0x42, 0x69, 0x33, 0x66, 0x2d, 0x4a, 0x39, 0x4b, 0x4f, 0x45,
        0x6f, 0x41, 0x36, 0x6c, 0x1b, 0x28, 0x48, 0x7a, 0x43, 0x1b, 0x24, 0x40,
        0x1b, 0x24, 0x42,
      };
      str =

  "xk\u001aY]?jUQ\u8590\u7f69\u805e\u58a8\u68df\u7e55\ufffd\ufffd\ufffd\u66bf\ufffd";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x5e, 0x36, 0x4d, 0x27, 0x76, 0x38, 0x34, 0x6a, 0x55,
        0x1b, 0x28, 0x42, 0x61,
      };
      str = "^6M'v84jUa";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x1b, 0x28, 0x4a, 0x7a, 0x5c, 0x2e, 0x34, 0x3d, 0x62,
        0x69, 0x2e, 0x52, 0x37, 0x41, 0x1b, 0x28, 0x4a, 0x49, 0x3e,
      };
      str = "z\u00a5.4\u003dbi.R7AI>";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x1b, 0x28, 0x48, 0x4b, 0x62, 0x60, 0x63, 0x1b, 0x24,
        0x42, 0x77, 0x57, 0x67, 0x61, 0x1b, 0x24, 0x40, 0x45, 0x68, 0x1b, 0x28,
        0x49, 0x6e, 0x1b, 0x28, 0x4a, 0x38, 0x5f, 0x5e, 0x7d, 0x54, 0x70, 0x45,
        0x5b,
      };
      str = "\ufffd(HKb`c\ufffd\u8268\u5d8b\ufffd8_^}TpE[";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x6a, 0x41, 0x5c, 0x78, 0x5d, 0x58, 0x2b, 0x71, 0x42,
        0x4c, 0x52, 0x14,
      };
      str = "jA\\x]X+qBLR\u0014";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x41, 0x2a, 0x1b, 0x24, 0x40, 0x22,
        0x28, 0x29, 0x41, 0x75, 0x1b, 0x28, 0x49, 0x1e, 0x33, 0x72, 0x54, 0x53,
        0x1b, 0x28, 0x4a, 0x28, 0x7e, 0x45, 0x7c, 0x28, 0x60, 0x40,
      };
      str =
"\u9078\u203b\ufffd\ufffd\ufffd\uff73\ufffd\uff94\uff93(\u203eE|(`@";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x0c, 0x7b, 0x26, 0x29, 0x5b, 0x79, 0x57, 0x6a, 0x24,
        0x1b, 0x24, 0x40, 0x66, 0x53,
      };
      str = "\u000c\u007b&)[yWj$\u801c";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x53, 0x69, 0x1b, 0x28, 0x42, 0x1b,
        0x28, 0x49, 0x0c, 0x7d, 0x42, 0x34, 0x5c, 0x47, 0x44, 0x6d, 0x5d, 0x7a,
        0x59, 0x73, 0x53, 0x3a, 0x28, 0x61, 0x23, 0x3b, 0x27,
      };
      str =

  "\u5694\ufffd\ufffd\ufffd\uff82\uff74\uff9c\uff87\uff84\ufffd\uff9d\ufffd\uff99\ufffd\uff93\uff7a\uff68\ufffd\uff63\uff7b\uff67";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x22, 0x37, 0x2c, 0x7a, 0x1b, 0x28, 0x48, 0x6f, 0x21,
        0x6f, 0x5c, 0x54, 0x60, 0x6d, 0x6d, 0x74, 0x7c, 0x45, 0x3a, 0x4f, 0x6c,
        0x29, 0x34,
      };
      str = "\"7\u002cz\ufffd(Ho!o\\T`mmt|E:Ol)4";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] { 0x20, 0x72, 0x65, 0x7b };
      str = "\u0020re\u007b";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x47, 0x65, 0x43, 0x3b, 0x2d, 0x40, 0x2a, 0x3b, 0x7a,
        0x56, 0x39, 0x3f, 0x63, 0x6a, 0x73, 0x2e,
      };
      str = "GeC;-@*;zV9?cjs.";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x3f, 0x41, 0x6a, 0x74, 0x3b, 0x31, 0x16, 0x2d,
        0x72,
      };
      str = "?Ajt;1\u0016-r";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x4a, 0x3e, 0x2e, 0x6f, 0x2b, 0x20,
        0x48, 0x74, 0x62, 0x20, 0x5f, 0x52, 0x69,
      };
      str = "\u5e63\ufffd\ufffd\u98db\ufffd\u7032\ufffd";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] { 0x1b, 0x24, 0x40, 0x31, 0x78 };
      str = "\u6c5a";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x7e, 0x5e, 0x59, 0x60, 0x3a, 0x21, 0x5f, 0x7d, 0x56,
        0x79, 0x71, 0x76, 0x38, 0x29, 0x61, 0x1b, 0x28, 0x49, 0x1b, 0x28, 0x48,
        0x39, 0x78, 0x47, 0x50, 0x35, 0x6f, 0x7d, 0x1b, 0x28, 0x48,
      };
      str =

  "~^Y`:!_}Vyqv8)a\ufffd\uff68\uff88\uff79\ufffd\uff87\uff90\uff75\ufffd\ufffd\ufffd\uff68\uff88";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x1b, 0x28, 0x48, 0x61, 0x2e, 0x7c, 0x52, 0x35,
        0x38,
      };
      str = "\ufffd(Ha.|R58";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x6a, 0x42, 0x47, 0x4d, 0x1b, 0x28, 0x42, 0x3e, 0x64,
        0x57, 0x26, 0x22, 0x22, 0x23, 0x71, 0x49, 0x3c, 0x5b, 0x1b, 0x28, 0x4a,
        0x52,
      };
      str = "jBGM>dW&\"\"#qI<[R";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] { 0x7a, 0x64 };
      str = "zd";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x1b, 0x28, 0x49, 0x5a, 0x55, 0x7c, 0x34, 0x78, 0x46,
        0x33, 0x2d, 0x41, 0x30, 0x50, 0x1b, 0x28, 0x42, 0x77, 0x66, 0x62, 0x55,
        0x65, 0x2d, 0x1b, 0x28, 0x48, 0x5e, 0x6a, 0x3a, 0x2e, 0x3b, 0x69, 0x1b,
        0x24, 0x40, 0x3d, 0x4d, 0x34,
      };
      str =

  "\uff9a\uff95\ufffd\uff74\ufffd\uff86\uff73\uff6d\uff81\uff70\uff90wfbUe-\ufffd(H^j:.;i\u7c9b\ufffd";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x27, 0x56, 0x58, 0x30, 0x28, 0x51, 0x4d, 0x4a, 0x28,
        0x6c, 0x41, 0x3b, 0x3b, 0x61, 0x26, 0x1b, 0x28, 0x4a, 0x5e, 0x2d, 0x45,
        0x33, 0x22, 0x45, 0x1b, 0x28, 0x49, 0x6d, 0x3e, 0x51, 0x5e, 0x45,
        0x26,
      };
      str = "'VX0(QMJ(lA;;a&^-E3\"E\ufffd\uff7e\uff91\uff9e\uff85\uff66";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x57, 0x74, 0x4e, 0x1b, 0x28, 0x48, 0x53, 0x54, 0x1b,
        0x28, 0x4a,
      };
      str = "WtN\ufffd(HST";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x1b, 0x28, 0x49, 0x1b, 0x28, 0x48, 0x1b, 0x28, 0x42,
        0x45, 0x55, 0x70, 0x1b, 0x28, 0x42, 0x5a, 0x2e, 0x6b, 0x39, 0x48, 0x1b,
        0x28, 0x4a, 0x49, 0x62, 0x6d, 0x66, 0x29, 0x30, 0x26, 0x75, 0x41, 0x20,
        0x30, 0x5b, 0x4e, 0x29, 0x22,
      };
      str = "\ufffd\uff68\uff88EUpZ.k9HIbmf)0&uA\u00200[N)\"";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x5a, 0x4d, 0x4f, 0x1b, 0x28, 0x42, 0x75, 0x44, 0x59,
        0x75, 0x64, 0x5b, 0x1b, 0x28, 0x48, 0x2a, 0x40, 0x1b, 0x28, 0x48, 0x59,
        0x1b, 0x28, 0x42, 0x77, 0x5e, 0x79, 0x72, 0x62, 0x48, 0x56, 0x2a,
        0x2d,
      };
      str = "ZMOuDYud[\ufffd(H*@\ufffd(HYw^yrbHV*-";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x2a, 0x4d, 0x5a, 0x38, 0x74, 0x4e, 0x26, 0x47, 0x2d,
        0x69, 0x44, 0x5f, 0x79, 0x4b, 0x6c, 0x75, 0x1b, 0x28, 0x42, 0x31, 0x4b,
        0x39, 0x3f, 0x1b, 0x28, 0x4a, 0x4c, 0x45, 0x63, 0x5c, 0x1b, 0x24,
        0x42,
      };
      str = "*MZ8tN&G-iD_yKlu1K9?LEc\u00a5";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x77, 0x2a, 0x42, 0x21, 0x60, 0x4b, 0x57, 0x69, 0x68,
        0x1b, 0x28, 0x49, 0x1b, 0x28, 0x48, 0x32, 0x50, 0x26, 0x37, 0x57,
      };
      str = "w*B!`KWih\ufffd\uff68\uff88\uff72\uff90\uff66\uff77\uff97";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] { 0x1b, 0x28, 0x49, 0x4f, 0x41, 0x75, 0x23, 0x6e };
      str = "\uff8f\uff81\ufffd\uff63\ufffd";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x5b, 0x6e, 0x5d, 0x1b, 0x24, 0x42, 0x67, 0x2f, 0x7a,
        0x1b, 0x24, 0x42, 0x42, 0x23, 0x67, 0x1b, 0x28, 0x49, 0x30,
      };
      str = "[n]\u8180\ufffd\u8d08\ufffd\uff70";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x56, 0x60, 0x55, 0x46, 0x72, 0x52, 0x1b, 0x28, 0x49,
        0x2c, 0x44, 0x1b, 0x24, 0x42, 0x66, 0x3b, 0x25, 0x27, 0x2d, 0x6b, 0x23,
        0x3f, 0x54, 0x38, 0x63, 0x30,
      };
      str = "V`UFrR\uff6c\uff84\u7faf\u30a7\u3232\ufffd\u57b3\u7955";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x1b, 0x24, 0x40, 0x71, 0x64, 0x30, 0x26, 0x2c, 0x5b,
        0x72, 0x48, 0x35, 0x1b, 0x24, 0x40, 0x5a, 0x1b, 0x28, 0x48, 0x65, 0x26,
        0x1b, 0x28, 0x42, 0x22, 0x1b, 0x28, 0x4a,
      };
      str = "\u9a57\u611b\ufffd\u9be3\ufffd\ufffd\ufffd\ufffd\u7d4b\"";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x64, 0x74, 0x15, 0x24, 0x71, 0x6b, 0x49, 0x45, 0x1b,
        0x28, 0x48, 0x41, 0x60, 0x53, 0x74, 0x68, 0x6c, 0x4a, 0x23, 0x2c, 0x6b,
        0x5c, 0x57, 0x52, 0x1b, 0x24, 0x42, 0x36, 0x27, 0x65,
      };
      str = "dt\u0015$qkIE\ufffd(HA`SthlJ#\u002ck\\WR\u51f6\ufffd";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x58, 0x71, 0x5f, 0x45, 0x36, 0x1b, 0x24, 0x40, 0x3a,
        0x1b, 0x28, 0x4a, 0x3f,
      };
      str = "Xq_E6\ufffd?";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x1b, 0x24, 0x40, 0x1b, 0x24, 0x42, 0x58, 0x4d, 0x7a,
        0x61, 0x51, 0x57, 0x14, 0x75, 0x65, 0x33, 0x1b, 0x28, 0x42, 0x4d, 0x6b,
        0x66, 0x7d, 0x3a, 0x5f, 0x2f,
      };
      str = "\ufffd\u6177\u6d87\u51b5\ufffd\ufffd\ufffdMkf}:_/";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x1b, 0x28, 0x49, 0x67, 0x1b, 0x28, 0x49, 0x3f, 0x7d,
        0x15, 0x2d, 0x3f, 0x76, 0x1b, 0x28, 0x49, 0x6b, 0x1b, 0x28, 0x49, 0x2c,
        0x39, 0x70, 0x1b, 0x28, 0x42, 0x21, 0x60, 0x26, 0x6a, 0x75, 0x11, 0x49,
        0x6f, 0x6b, 0x41,
      };
      str =

  "\ufffd\uff7f\ufffd\ufffd\uff6d\uff7f\ufffd\ufffd\uff6c\uff79\ufffd!`&ju\u0011IokA";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] { 0x63 };
      str = "c";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x1b, 0x28, 0x48, 0x55, 0x52, 0x6f, 0x71, 0x74, 0x74,
        0x56, 0x7f, 0x1b, 0x28, 0x48, 0x11, 0x29, 0x4f, 0x5f, 0x78, 0x22, 0x19,
        0x1b, 0x28, 0x4a,
      };
      str = "\ufffd(HURoqttV\u007f\ufffd(H\u0011)O_x\"\u0019";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x27, 0x21, 0x63, 0x2d, 0x68, 0x1b, 0x28, 0x48, 0x43,
        0x7c, 0x45, 0x6f, 0x46, 0x4b, 0x3d, 0x35, 0x66, 0x78, 0x44, 0x39,
        0x3d,
      };
      str = "'!c-h\ufffd(HC|EoFK\u003d5fxD9\u003d";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x1b, 0x24, 0x40, 0x1b, 0x28, 0x48, 0x31, 0x2f, 0x7e,
        0x25, 0x6e, 0x1b, 0x28, 0x42, 0x6a, 0x5b, 0x68, 0x25, 0x5f, 0x26, 0x4a,
        0x48, 0x51, 0x72, 0x5e, 0x20, 0x29, 0x4d,
      };
      str = "\ufffd\ufffd\u4e11\ufffd\ufffdj[h%_&JHQr^\u0020)M";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] { 0x1b, 0x24, 0x40, 0x7b };
      str = "\ufffd";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] { 0x1b, 0x28, 0x49, 0x29, 0x38, 0x61, 0x40 };
      str = "\uff69\uff78\ufffd\uff80";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x4e, 0x6c, 0x27, 0x55, 0x47, 0x67, 0x74, 0x6b, 0x2d,
        0x3b, 0x1b, 0x24, 0x40, 0x49, 0x72, 0x5d, 0x31,
      };
      str = "Nl'UGgtk-;\u8461\u8616";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x1b, 0x24, 0x40, 0x7d, 0x26, 0x23, 0x59, 0x30, 0x62,
        0x78, 0x70, 0x71, 0x1b, 0x28, 0x49, 0x64, 0x4c, 0x53, 0x67, 0x1b, 0x28,
        0x4a, 0x4c, 0x64,
      };
      str = "\ufffd\uff39\u8b02\ufffd\ufffd\ufffd\uff8c\uff93\ufffdLd";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x2d, 0x2d, 0x3f, 0x2e, 0x40, 0x6e, 0x3f, 0x28, 0x28,
        0x71, 0x62, 0x41, 0x65, 0x6c, 0x29,
      };
      str = "--?.@n?((qbAel)";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x3a, 0x4c, 0x5c, 0x6f, 0x56, 0x50, 0x7c, 0x43, 0x6e,
        0x27, 0x39, 0x20, 0x68,
      };
      str = ":L\\oVP|Cn'9\u0020h";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x1b, 0x28, 0x49, 0x22, 0x42, 0x40, 0x3d, 0x66, 0x20,
        0x51, 0x1b, 0x28, 0x42, 0x1b, 0x28, 0x42, 0x58, 0x72, 0x39, 0x5c, 0x1b,
        0x24, 0x42, 0x4b, 0x5d, 0x78, 0x39, 0x76, 0x22, 0x70,
      };
      str =

  "\uff62\uff82\uff80\uff7d\ufffd\ufffd\uff91\ufffdXr9\\\u7ffb\ufffd\ufffd\ufffd";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x20, 0x56, 0x5e, 0x1b, 0x24, 0x42, 0x2c, 0x6c, 0x51,
        0x69, 0x43, 0x49, 0x2d, 0x32, 0x7e, 0x52, 0x7c, 0x54, 0x59, 0x3d, 0x2d,
        0x24, 0x37, 0x6a, 0x1b, 0x24, 0x40,
      };
      str = "\u0020V^\ufffd\u522e\u6a80\u2471\ufffd\u973b\u62ff\u2463\u7a74";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] { 0x2e };
      str = ".";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x1b, 0x28, 0x4a, 0x1b, 0x28, 0x4a, 0x67, 0x59, 0x5e,
        0x4b, 0x3f, 0x2d, 0x4e, 0x76, 0x4d, 0x45, 0x0b, 0x18, 0x5f,
      };
      str = "\ufffdgY^K?-NvME\u000b\u0018_";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x2f, 0x1b, 0x24, 0x40, 0x5a, 0x37, 0x49, 0x74, 0x59,
        0x36, 0x1b, 0x28, 0x4a, 0x38, 0x33, 0x66,
      };
      str = "/\u6518\u90e8\u62d483f";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x7c, 0x3a, 0x5e, 0x4a, 0x24, 0x7a, 0x2b, 0x60, 0x7c,
        0x55, 0x27, 0x74, 0x5a, 0x65, 0x59, 0x32, 0x58, 0x5f, 0x77, 0x1b, 0x28,
        0x42, 0x4c, 0x7a,
      };
      str = "|:^J$z+`|U'tZeY2X_wLz";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x4d, 0x41, 0x1b, 0x28, 0x49, 0x58, 0x53, 0x58, 0x6e,
        0x4f, 0x65, 0x31, 0x6d, 0x53, 0x2e,
      };
      str = "MA\uff98\uff93\uff98\ufffd\uff8f\ufffd\uff71\ufffd\uff93\uff6e";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x35, 0x75, 0x4c, 0x5d, 0x68, 0x64, 0x7b, 0x1b, 0x28,
        0x48,
      };
      str = "5uL]hd\u007b\ufffd(H";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x2d, 0x76, 0x48, 0x1b, 0x1b, 0x28, 0x48, 0x6e, 0x70,
        0x52, 0x6c, 0x73, 0x27, 0x77, 0x67, 0x46, 0x62, 0x58, 0x1b, 0x28, 0x48,
        0x7b, 0x20, 0x33, 0x1b, 0x28, 0x42, 0x26, 0x61, 0x2b, 0x4c, 0x54,
        0x67,
      };
      str = "-vH\ufffd\ufffd(HnpRls'wgFbX\ufffd(H\u007b\u00203&a+LTg";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x1b, 0x28, 0x49, 0x2d, 0x21, 0x40, 0x79, 0x65, 0x1b,
        0x28, 0x42, 0x76, 0x72,
      };
      str = "\uff6d\uff61\uff80\ufffd\ufffdvr";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x65, 0x7d, 0x40, 0x1b, 0x28, 0x4a,
        0x5d, 0x2f,
      };
      str = "\u7f38\ufffd]/";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] { 0x1b, 0x28, 0x42, 0x51 };
      str = "Q";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x46, 0x7c, 0x75, 0x1b, 0x28, 0x4a, 0x1b, 0x28, 0x49,
        0x63, 0x35, 0x2c, 0x34, 0x5d, 0x37, 0x5d, 0x47,
      };
      str = "F|u\ufffd\ufffd\uff75\uff6c\uff74\uff9d\uff77\uff9d\uff87";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x73, 0x1b, 0x28, 0x48, 0x35, 0x52, 0x68, 0x22, 0x2d,
        0x5c, 0x58, 0x22, 0x42, 0x51, 0x1b, 0x24, 0x40, 0x74, 0x71, 0x31, 0x7b,
        0x1b, 0x28, 0x49, 0x63,
      };
      str = "s\ufffd(H5Rh\"-\\X\"BQ\ufffd\u592e\ufffd";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x51, 0x39, 0x4e, 0x67, 0x23, 0x22, 0x31, 0x5a, 0x46,
        0x64, 0x6b, 0x2b, 0x6b, 0x50, 0x66, 0x48, 0x2e, 0x1b, 0x28, 0x48, 0x49,
        0x20, 0x4c,
      };
      str = "Q9Ng#\"1ZFdk+kPfH.\ufffd(HI\u0020L";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x60, 0x69, 0x59, 0x31, 0x6d, 0x5f, 0x2a, 0x6f, 0x2a,
        0x4a, 0x07, 0x58, 0x75,
      };
      str = "`iY1m_*o*J\u0007Xu";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x28, 0x5d, 0x2b, 0x1b, 0x28, 0x49, 0x1b, 0x28, 0x42,
        0x38, 0x57, 0x7d, 0x4c, 0x5d, 0x62, 0x75, 0x25, 0x21, 0x5d,
      };
      str = "(]+\ufffd8W}L]bu%!]";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x6a, 0x1b, 0x28, 0x4a, 0x20, 0x1b,
        0x24, 0x40, 0x1b, 0x28, 0x48, 0x7c, 0x1b, 0x24, 0x40, 0x64, 0x32, 0x1b,
        0x28, 0x42, 0x61, 0x3a,
      };
      str = "\ufffd\u0020\ufffd\ufffd\ufffd\u7b8da:";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x21, 0x13, 0x1b, 0x28, 0x48, 0x4d, 0x37, 0x4f, 0x1b,
        0x28, 0x48, 0x58, 0x6b, 0x76, 0x20, 0x29, 0x1b, 0x28, 0x49,
      };
      str = "!\u0013\ufffd(HM7O\ufffd(HXkv\u0020)";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x58, 0x3d, 0x48, 0x53, 0x34, 0x68, 0x1b, 0x28, 0x49,
        0x69, 0x06, 0x64, 0x56, 0x20, 0x1b, 0x24, 0x40, 0x2c, 0x1b, 0x28, 0x4a,
        0x1b, 0x28, 0x42, 0x7e, 0x1b, 0x28, 0x49, 0x62, 0x23, 0x30, 0x6e,
      };
      str =

  "X\u003dHS4h\ufffd\ufffd\ufffd\uff96\ufffd\ufffd\ufffd~\ufffd\uff63\uff70\ufffd";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x74, 0x7e, 0x70, 0x59, 0x25, 0x39,
        0x44, 0x4d, 0x70, 0x64, 0x5e, 0x4a, 0x6e, 0x6f,
      };
      str = "\ufffd\u9785\u30b9\u585a\u97a3\u6dd9\u923f";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x1b, 0x28, 0x42, 0x57, 0x73, 0x23, 0x74, 0x79, 0x65,
        0x34, 0x4a, 0x67, 0x1e,
      };
      str = "Ws#tye4Jg\u001e";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x00, 0x2a, 0x71, 0x65, 0x5b, 0x49,
        0x1b, 0x28, 0x48, 0x27, 0x28, 0x20, 0x3d, 0x5a, 0x4e, 0x43, 0x5d, 0x62,
        0x63, 0x3e, 0x25,
      };
      str =

  "\ufffd\ufffd\u7e3b\ufffd\ufffd\ufffd\u0416\ufffd\u51c6\u6dbc\u6c13\u79d5\ufffd";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x61, 0x5e, 0x7e, 0x35, 0x1b, 0x24, 0x40, 0x47, 0x1b,
        0x28, 0x42,
      };
      str = "a^~5\ufffd";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x22, 0x53, 0x21, 0x1b, 0x28, 0x4a, 0x46, 0x4c, 0x72,
        0x33, 0x6b, 0x2f, 0x48, 0x52, 0x67, 0x21, 0x1b, 0x28, 0x42, 0x62, 0x64,
        0x1b, 0x24, 0x40, 0x35, 0x7b,
      };
      str = "\"S!FLr3k/HRg!bd\u9b5a";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x20, 0x54, 0x5e, 0x4d, 0x52, 0x60,
        0x38,
      };
      str = "\ufffd\u58d8\u7aaf\u7296";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] { 0x1b, 0x28, 0x42 };
      str = String.Empty;
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] { 0x1b, 0x28, 0x49 };
      str = String.Empty;
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x4e, 0x4f, 0x34, 0x63, 0x51, 0x3e, 0x46, 0x1b, 0x24,
        0x42, 0x2b, 0x25, 0x2c, 0x33, 0x77, 0x48, 0x48, 0x79, 0x59, 0x24, 0x75,
        0x51, 0x59, 0x26, 0x3e, 0x25, 0x38,
      };
      str = "NO4cQ>F\ufffd\ufffd\ufffd\u5fae\u622e\ufffd\u6232\u54e8\ufffd";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] { 0x49, 0x1b, 0x24, 0x42, 0x1b, 0x24, 0x40, 0x43 };
      str = "I\ufffd\ufffd";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x31, 0x7d, 0x2a, 0x38, 0x51, 0x41, 0x1b, 0x24, 0x42,
        0x11, 0x5c, 0x68, 0x30, 0x48, 0x31, 0x54, 0x5b, 0x2f, 0x34, 0x7d, 0x53,
        0x77, 0x38, 0x5c, 0x71, 0x29, 0x67, 0x72, 0x47,
      };
      str =

  "1}*8QA\ufffd\u6a0a\u978d\u92ed\u6726\u68cb\u56d3\u9867\u98c3\u82d2\ufffd";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x41, 0x64, 0x45, 0x5a, 0x41, 0x26, 0x75, 0x3f, 0x57,
        0x69, 0x3b, 0x33, 0x7e, 0x46, 0x1b, 0x28, 0x4a, 0x41, 0x1b, 0x28, 0x49,
        0x52, 0x3e, 0x6b, 0x2e, 0x3b, 0x21, 0x5b, 0x48,
      };
      str = "AdEZA&u?Wi;3~FA\uff92\uff7e\ufffd\uff6e\uff7b\uff61\uff9b\uff88";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x4c, 0x72, 0x38, 0x4e, 0x3e, 0x06, 0x35, 0x1b, 0x28,
        0x42, 0x46,
      };
      str = "Lr8N>\u00065F";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x40, 0x4b, 0x48, 0x76, 0x7b, 0x75, 0x51, 0x1b, 0x28,
        0x42, 0x7e, 0x44, 0x70, 0x7a, 0x67, 0x63, 0x39, 0x1b, 0x28, 0x49, 0x58,
        0x34, 0x4b, 0x4d, 0x44, 0x7c, 0x6f, 0x5f,
      };
      str =
"@KHv\u007buQ~Dpzgc9\uff98\uff74\uff8b\uff8d\uff84\ufffd\ufffd\uff9f";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x2d, 0x1b, 0x28, 0x49, 0x2b, 0x22, 0x40, 0x72, 0x79,
        0x69, 0x2c, 0x4b, 0x71, 0x60, 0x4a, 0x4b, 0x5c,
      };
      str =

  "-\uff6b\uff62\uff80\ufffd\ufffd\ufffd\uff6c\uff8b\ufffd\ufffd\uff8a\uff8b\uff9c";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x33, 0x45, 0x4f, 0x32, 0x5d, 0x64, 0x63, 0x7f, 0x39,
        0x24, 0x4e, 0x0f, 0x74, 0x58,
      };
      str = "3EO2]dc\u007f9$N\ufffdtX";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x48, 0x66, 0x42, 0x1b, 0x28, 0x4a, 0x74, 0x32,
        0x67,
      };
      str = "HfBt2g";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x2e, 0x28, 0x4f, 0x5d, 0x2a, 0x2e, 0x3c, 0x40, 0x1b,
        0x24, 0x40, 0x69, 0x79, 0x47, 0x5e, 0x1b, 0x24, 0x40, 0x43, 0x5f, 0x55,
        0x05, 0x41, 0x1b, 0x28, 0x42, 0x38, 0x55, 0x6c,
      };
      str = ".(O]*.<@\u874e\u5a92\u84c4\ufffd\ufffd8Ul";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] { 0x36, 0x34, 0x5c, 0x78 };
      str = "64\\x";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
      bytes = new byte[] {
        0x1b, 0x28, 0x4a, 0x7b, 0x40, 0x68, 0x7e, 0x74, 0x32,
        0x6a, 0x27, 0x20, 0x3a,
      };
      str = "\u007b@h\u203et2j'\u0020:";
      Assert.AreEqual (
        str,
        Encodings.DecodeToString(charset, bytes));
    }
    [Test]
    public void TestIso2022JPEncoder() {
      byte[] bytes;
      string str;
      ICharacterEncoding charset = Encodings.GetEncoding("iso-2022-jp");
      str = "\u30f6";
      bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x76, 0x1b, 0x28, 0x42 };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u223d";
      bytes = new byte[] { 0x1b, 0x24, 0x42, 0x22, 0x66, 0x1b, 0x28, 0x42 };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\uff97\u5680\uff08";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x25, 0x69, 0x53, 0x66, 0x21, 0x4a,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u5cf0\uff22\u7941";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x4a, 0x76, 0x23, 0x42, 0x37, 0x37,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u56de";
      bytes = new byte[] { 0x1b, 0x24, 0x42, 0x32, 0x73, 0x1b, 0x28, 0x42 };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\uff26\uff29\uff78";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x23, 0x46, 0x23, 0x49, 0x25, 0x2f,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\uff94";
      bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x64, 0x1b, 0x28, 0x42 };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\uff1a";
      bytes = new byte[] { 0x1b, 0x24, 0x42, 0x21, 0x27, 0x1b, 0x28, 0x42 };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u54c2\uff54\u5df5";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x53, 0x22, 0x23, 0x74, 0x56, 0x62,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u7826\u695c\u6681";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x3a, 0x56, 0x5c, 0x35, 0x36, 0x47,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\uff5c\u5168";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x21, 0x43, 0x41, 0x34, 0x1b, 0x28,
        0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u5514";
      bytes = new byte[] { 0x1b, 0x24, 0x42, 0x53, 0x2a, 0x1b, 0x28, 0x42 };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u695c\uff70\u5b63";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x5c, 0x35, 0x21, 0x3c, 0x35, 0x28,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\uff2e\uff9c\u7e52";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x23, 0x4e, 0x25, 0x6f, 0x7b, 0x53,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u7b46\uff9d\u6b63";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x49, 0x2e, 0x25, 0x73, 0x40, 0x35,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u7e4b\u7e5d";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x37, 0x52, 0x65, 0x63, 0x1b, 0x28,
        0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u9c57\uff13\u6377";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x4e, 0x5a, 0x23, 0x33, 0x3e, 0x39,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u2032\u7e67\u5bdd\uff2e";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x21, 0x6c, 0x65, 0x62, 0x3f, 0x32,
        0x23, 0x4e, 0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u57d3";
      bytes = new byte[] { 0x1b, 0x24, 0x42, 0x54, 0x40, 0x1b, 0x28, 0x42 };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u696d\u5727\u6de4\u7d35";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x36, 0x48, 0x30, 0x35, 0x5e, 0x4b,
        0x65, 0x2a, 0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u03c1";
      bytes = new byte[] { 0x1b, 0x24, 0x42, 0x26, 0x51, 0x1b, 0x28, 0x42 };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "?\uff93\uff6e";
      bytes = new byte[] {
        0x3f, 0x1b, 0x24, 0x42, 0x25, 0x62, 0x25, 0x67, 0x1b,
        0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u50e3\u734e\u7dd1";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x51, 0x29, 0x60, 0x52, 0x4e, 0x50,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u5f14\uff69";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x44, 0x24, 0x25, 0x25, 0x1b, 0x28,
        0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\uff34\uff5d\u6a29\u62d9";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x23, 0x54, 0x21, 0x51, 0x38, 0x22,
        0x40, 0x5b, 0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u5147\uff6c\uff86\uff83";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x36, 0x24, 0x25, 0x63, 0x25, 0x4b,
        0x25, 0x46, 0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u5186";
      bytes = new byte[] { 0x1b, 0x24, 0x42, 0x31, 0x5f, 0x1b, 0x28, 0x42 };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u77bf\uff2b\u2283\uff39";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x62, 0x5a, 0x23, 0x4b, 0x22, 0x3f,
        0x23, 0x59, 0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u6c86\uff87\uff08";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x7a, 0x5d, 0x25, 0x4c, 0x21, 0x4a,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u6e72\u76d7";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x5e, 0x53, 0x45, 0x70, 0x1b, 0x28,
        0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u6c41\u51cb";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x3d, 0x41, 0x43, 0x7c, 0x1b, 0x28,
        0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u69b1\u7def\u2021\uff30\u2542";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x5c, 0x63, 0x30, 0x5e, 0x22, 0x78,
        0x23, 0x50, 0x28, 0x40, 0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u6959";
      bytes = new byte[] { 0x1b, 0x24, 0x42, 0x5c, 0x3e, 0x1b, 0x28, 0x42 };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u67b9";
      bytes = new byte[] { 0x1b, 0x24, 0x42, 0x5b, 0x54, 0x1b, 0x28, 0x42 };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u7d63";
      bytes = new byte[] { 0x1b, 0x24, 0x42, 0x65, 0x33, 0x1b, 0x28, 0x42 };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u5154\uff7c\u52e0";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x51, 0x3d, 0x25, 0x37, 0x52, 0x2d,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u2103\uff48\u6c8d";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x21, 0x6e, 0x23, 0x68, 0x5d, 0x6c,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u5ec3\uff57\uff9e";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x47, 0x51, 0x23, 0x77, 0x21, 0x2b,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\uff1b\u5be4\uff5c";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x21, 0x28, 0x55, 0x68, 0x21, 0x43,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u6f6d\uff4f\uff37";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x5f, 0x2c, 0x23, 0x6f, 0x23, 0x57,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u7db7\u5f90";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x7b, 0x50, 0x3d, 0x79, 0x1b, 0x28,
        0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\uff61\uff20";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x21, 0x23, 0x21, 0x77, 0x1b, 0x28,
        0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\uff99\u7ac5";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x25, 0x6b, 0x63, 0x61, 0x1b, 0x28,
        0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\uff47\uff2e\uff41";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x23, 0x67, 0x23, 0x4e, 0x23, 0x61,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u665e\u67c4\u7c7e";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x5a, 0x6b, 0x4a, 0x41, 0x4c, 0x62,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u6562\u5a41\uff59";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x34, 0x3a, 0x4f, 0x2c, 0x23, 0x79,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u6c6a\u5360\u5821";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x5d, 0x6a, 0x40, 0x6a, 0x54, 0x48,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u79e9\u6ef8\u6d1e";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x43, 0x61, 0x5e, 0x77, 0x46, 0x36,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u6cb9\u67fb\uff36";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x4c, 0x7d, 0x3a, 0x3a, 0x23, 0x56,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\uffe2\uff94\u250f";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x22, 0x4c, 0x25, 0x64, 0x28, 0x2e,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u7a70\uff13\u5553";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x63, 0x55, 0x23, 0x33, 0x37, 0x3c,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\uff5d";
      bytes = new byte[] { 0x1b, 0x24, 0x42, 0x21, 0x51, 0x1b, 0x28, 0x42 };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u69fd";
      bytes = new byte[] { 0x1b, 0x24, 0x42, 0x41, 0x65, 0x1b, 0x28, 0x42 };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u6f64\u6ce1Y\u6328\uff73";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x3d, 0x61, 0x4b, 0x22, 0x1b, 0x28,
        0x42, 0x59, 0x1b, 0x24, 0x42, 0x30, 0x27, 0x25, 0x26, 0x1b, 0x28,
        0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u5fae\u5a1a\u7826";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x48, 0x79, 0x55, 0x33, 0x3a, 0x56,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u7009\uff79\u5230";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x5f, 0x43, 0x25, 0x31, 0x45, 0x7e,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u5085\u7949\u527d";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x50, 0x7c, 0x3b, 0x63, 0x51, 0x77,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u5b57\uff41\u706b";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x3b, 0x7a, 0x23, 0x61, 0x32, 0x50,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\uff21\uff49\uff6b";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x23, 0x41, 0x23, 0x69, 0x25, 0x29,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\uff7b\u5338\u56d7";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x25, 0x35, 0x52, 0x3e, 0x53, 0x78,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\uff9c\uff1b\uff71\u61a4";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x25, 0x6f, 0x21, 0x28, 0x25, 0x22,
        0x4a, 0x30, 0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u5be1\uff3d\u7e94";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x32, 0x49, 0x21, 0x4f, 0x65, 0x78,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u7462";
      bytes = new byte[] { 0x1b, 0x24, 0x42, 0x7b, 0x30, 0x1b, 0x28, 0x42 };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\uff57\uff03";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x23, 0x77, 0x21, 0x74, 0x1b, 0x28,
        0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\uff5e\u5841\uff72";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x21, 0x41, 0x4e, 0x5d, 0x25, 0x24,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u602a\u3092";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x32, 0x78, 0x24, 0x72, 0x1b, 0x28,
        0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u50de\uff11\uff32";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x51, 0x26, 0x23, 0x31, 0x23, 0x52,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\uff52\u5f09";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x23, 0x72, 0x57, 0x32, 0x1b, 0x28,
        0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u7ca7";
      bytes = new byte[] { 0x1b, 0x24, 0x42, 0x3e, 0x51, 0x1b, 0x28, 0x42 };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u6bcd\u5ba3";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x4a, 0x6c, 0x40, 0x6b, 0x1b, 0x28,
        0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\uff6e\u568a\uff9d";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x25, 0x67, 0x53, 0x67, 0x25, 0x73,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u7f78\uff3a\u5c94\uff08";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x66, 0x2f, 0x23, 0x5a, 0x56, 0x2b,
        0x21, 0x4a, 0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\uff93\u2514\uff4b\u5b9b";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x25, 0x62, 0x28, 0x26, 0x23, 0x6b,
        0x30, 0x38, 0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u530f\u793e]";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x52, 0x37, 0x3c, 0x52, 0x1b, 0x28,
        0x42, 0x5d,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\uff4e";
      bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x6e, 0x1b, 0x28, 0x42 };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u7cb9\u613d\u524b\u6c8d";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x64, 0x6f, 0x58, 0x49, 0x51, 0x6e,
        0x5d, 0x6c, 0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u6821\u8a8d";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x39, 0x3b, 0x47, 0x27, 0x1b, 0x28,
        0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\uff43\u778b";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x23, 0x63, 0x62, 0x53, 0x1b, 0x28,
        0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\uff77";
      bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x2d, 0x1b, 0x28, 0x42 };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\uff67";
      bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x21, 0x1b, 0x28, 0x42 };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u7b19\u5480\u78ca\uff64";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x63, 0x79, 0x52, 0x72, 0x62, 0x7d,
        0x21, 0x22, 0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\uff42\u585e\uff85";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x23, 0x62, 0x3a, 0x49, 0x25, 0x4a,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u5b95";
      bytes = new byte[] { 0x1b, 0x24, 0x42, 0x45, 0x66, 0x1b, 0x28, 0x42 };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\uff04\u4f83\u7483";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x21, 0x70, 0x34, 0x26, 0x4d, 0x7e,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u676a\u65e7\u5efc";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x5b, 0x42, 0x35, 0x6c, 0x47, 0x36,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u6846";
      bytes = new byte[] { 0x1b, 0x24, 0x42, 0x5b, 0x5a, 0x1b, 0x28, 0x42 };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u5289";
      bytes = new byte[] { 0x1b, 0x24, 0x42, 0x4e, 0x2d, 0x1b, 0x28, 0x42 };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\uff8f\u6e2f\u690d";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x25, 0x5e, 0x39, 0x41, 0x3f, 0x22,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u52fe\uffe2\u53f8\u6bb7\u6763";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x38, 0x7b, 0x22, 0x4c, 0x3b, 0x4a,
        0x5d, 0x56, 0x5b, 0x3c, 0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\uff0a\uff2e";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x21, 0x76, 0x23, 0x4e, 0x1b, 0x28,
        0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u67d0\u7fc1";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x4b, 0x3f, 0x32, 0x27, 0x1b, 0x28,
        0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u5c51\u5c3d\uff26\u5ddd";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x36, 0x7d, 0x3f, 0x54, 0x23, 0x46,
        0x40, 0x6e, 0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u5247\u2030\uff68";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x42, 0x27, 0x22, 0x73, 0x25, 0x23,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\uff71\u5373";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x25, 0x22, 0x42, 0x28, 0x1b, 0x28,
        0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u763b";
      bytes = new byte[] { 0x1b, 0x24, 0x42, 0x61, 0x71, 0x1b, 0x28, 0x42 };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\uff6a";
      bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x27, 0x1b, 0x28, 0x42 };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "O\u5bc9";
      bytes = new byte[] {
        0x4f, 0x1b, 0x24, 0x42, 0x55, 0x65, 0x1b, 0x28,
        0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\u52b9\uff04\uff21\u7de1\uff04";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x38, 0x7a, 0x21, 0x70, 0x23, 0x41,
        0x65, 0x4e, 0x21, 0x70, 0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "\uff8f\uff1b\uff43";
      bytes = new byte[] {
        0x1b, 0x24, 0x42, 0x25, 0x5e, 0x21, 0x28, 0x23, 0x63,
        0x1b, 0x28, 0x42,
      };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
      str = "T";
      bytes = new byte[] { 0x54 };
      TestCommon.AssertByteArraysEqual (
        bytes,
        Encodings.EncodeToBytes(str, charset));
    }
  }
}
