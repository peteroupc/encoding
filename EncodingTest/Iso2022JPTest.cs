using System;
using NUnit.Framework;
using PeterO;
using PeterO.Text;
using Test;

namespace EncodingTest {
[TestFixture]
public class Iso2022JPTest {
[Test]
public void TestIso2022JPDecoder() {
byte[] bytes;
string str;
ICharacterEncoding charset = Encodings.GetEncoding("iso-2022-jp");
bytes = new byte[] { 0x1b, 0x28, 0x42, 0x6e, 0x26, 0x45, 0x5c, 0x31, 0x1b,
  0x28, 0x49, 0x52, 0x67, 0x47, 0x3e, 0x4e, 0x76, 0x11, 0x62, 0x69, 0x70,
  0x5a, 0x52, 0x25, 0x1b, 0x28, 0x49, 0x37, 0x3a, 0x1b, 0x28, 0x4a };
str =

  "n&E\\1\uff92\ufffd\uff87\uff7e\uff8e\ufffd\ufffd\ufffd\ufffd\ufffd\uff9a\uff92\uff65\uff77\uff7a";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x78, 0x1b, 0x24, 0x40, 0x77, 0x57, 0x1b, 0x28, 0x42,
  0x52, 0x54 };
str = "x\ufffdRT";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x5a, 0x43, 0x2c, 0x78, 0x4a, 0x56, 0x7b, 0x26, 0x70,
  0x26, 0x1b, 0x28, 0x4a, 0x3f, 0x7e, 0x6d, 0x25, 0x1b, 0x28, 0x49, 0x31,
  0x08, 0x57, 0x3d, 0x43, 0x2e, 0x66, 0x25, 0x43, 0x5e };
str =

  "ZC\u002cxJV\u007b&p&?\u203em%\uff71\ufffd\uff97\uff7d\uff83\uff6e\ufffd\uff65\uff83\uff9e";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x28, 0x33, 0x56, 0x21, 0x62, 0x3b, 0x7a, 0x3f, 0x28,
  0x1b, 0x28, 0x48, 0x57, 0x3d, 0x60, 0x24, 0x66, 0x7d, 0x38, 0x5a, 0x7a,
  0x42, 0x68, 0x26, 0x7d, 0x35, 0x7a, 0x56, 0x4c };
str = "(3V!b;z?(\ufffd(HW=`$f}8ZzBh&}5zVL";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x4a, 0x50, 0x21, 0x77, 0x61, 0x59, 0x29 };
str = "P!waY)";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x51, 0x62, 0x46, 0x48, 0x1b, 0x24, 0x40, 0x66, 0x47,
  0x4d, 0x2b };
str = "QbFH\u7fe1\u6182";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x74, 0x49, 0x31, 0x46, 0x3f, 0x72, 0x5c, 0x60, 0x0b,
  0x5f, 0x3b };
str = "tI1F?r\\`\u000b_;";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x40, 0x30, 0x30, 0x50, 0x4c, 0x5f, 0x3e, 0x63, 0x75,
  0x1b, 0x28, 0x48, 0x3f, 0x1b, 0x28, 0x48, 0x2b, 0x67, 0x6a, 0x54, 0x3e,
  0x77, 0x18, 0x50, 0x40 };
str = "@00PL_>cu\ufffd(H?\ufffd(H+gjT>w\u0018P@";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x28, 0x77, 0x30, 0x70, 0x25, 0x24, 0x0f, 0x5c, 0x5e,
  0x18, 0x55, 0x30 };
str = "(w0p%$\ufffd\\^\u0018U0";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x64, 0x53, 0x45, 0x7a, 0x69, 0x6d,
  0x6d, 0x4b, 0x61, 0x64, 0x7c, 0x53, 0x4a, 0x3a, 0x4a };
str = "\u7c37\u7b54\u870a\u8f15\u75f2\u9733\u4e19\ufffd";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x51, 0x78, 0x27, 0x4b, 0x5a, 0x31, 0x4e, 0x66, 0x1b,
  0x24, 0x40, 0x4b, 0x2d, 0x48, 0x60, 0x1b, 0x28, 0x48, 0x40, 0x64, 0x18,
  0x5b, 0x33, 0x1b, 0x28, 0x48, 0x45 };
str = "Qx'KZ1Nf\u8c4a\u5f7c\ufffd\ufffd\u7d76\ufffd\u673f\ufffd\ufffd\ufffd";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x49, 0x1b, 0x24, 0x42, 0x26, 0x4b, 0x72,
  0x34, 0x41, 0x61, 0x16, 0x25, 0x25, 0x34, 0x7c, 0x5a, 0x3d, 0x51, 0x34,
  0x3d, 0x6b, 0x2b, 0x54, 0x5a, 0x3f, 0x21, 0x70, 0x43 };
str =

  "\ufffd\u03bb\u9b4e\u65e9\ufffd\u30a5\u671f\u6534\u5121\u6691\ufffd\u6537\uff04\ufffd";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x49, 0x3b, 0x58, 0x2f, 0x7b, 0x28, 0x49,
  0x71, 0x72, 0x7d, 0x56, 0x1b, 0x28, 0x4a, 0x2e, 0x36, 0x4e, 0x6c, 0x6c,
  0x56, 0x20, 0x45, 0x7b, 0x69, 0x32, 0x1b, 0x28, 0x4a, 0x57, 0x5f, 0x42,
  0x3e, 0x2e };
str =

  "\uff7b\uff98\uff6f\ufffd\uff68\uff89\ufffd\ufffd\ufffd\uff96.6NllV E\u007bi2W_B>.";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x57, 0x0b, 0x25, 0x52, 0x59, 0x48,
  0x30, 0x33, 0x51 };
str = "\ufffd\u30d2\u630c\u9bf5\ufffd";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x42, 0x65, 0x5f, 0x4a, 0x4e, 0x46, 0x2a,
  0x24, 0x1b, 0x24, 0x40, 0x7e, 0x4d, 0x07, 0x6f, 0x44, 0x03, 0x41, 0x32,
  0x5c, 0x4d, 0x1b, 0x24, 0x42, 0x74, 0x5e, 0x44 };
str = "e_JNF*$\ufffd\ufffd\u9435\ufffd\u6f38\u5be8\ufffd\ufffd";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x60, 0x54, 0x1b, 0x24, 0x40, 0x3c, 0x61, 0x51, 0x32,
  0x3a, 0x62, 0x2a, 0x4b, 0x33, 0x5c, 0x73, 0x1b, 0x28, 0x49, 0x2f, 0x7b,
  0x5e, 0x67, 0x27, 0x53, 0x67, 0x66, 0x58, 0x74, 0x4b };
str =

  "`T\u91c8\u5114\u8ca1\ufffd\u984e\ufffd\uff6f\ufffd\uff9e\ufffd\uff67\uff93\ufffd\ufffd\uff98\ufffd\uff8b";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x4a, 0x5d, 0x7a, 0x57, 0x1b, 0x28, 0x49,
  0x37, 0x3a, 0x70, 0x43, 0x55, 0x62, 0x64, 0x1b, 0x28, 0x4a, 0x6e, 0x1b,
  0x28, 0x4a, 0x3b, 0x23, 0x76, 0x4d, 0x61, 0x7a, 0x1b, 0x24, 0x40, 0x36,
  0x75, 0x45, 0x67, 0x29, 0x46, 0x62, 0x58 };
str =

  "]zW\uff77\uff7a\ufffd\uff83\uff95\ufffd\ufffdn;#vMaz\u7a7a\u5cf6\ufffd\u77b6";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x40, 0x40, 0x6e, 0x3d, 0x73, 0x1b, 0x28,
  0x42, 0x56, 0x40, 0x74, 0x62 };
str = "\u5ddd\u85f7V@tb";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x43, 0x1b, 0x28, 0x49, 0x6b, 0x57, 0x1b, 0x28, 0x4a };
str = "C\ufffd\uff97";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x48, 0x39, 0x40, 0x57, 0x55, 0x6a, 0x6b,
  0x2e, 0x4a, 0x5c, 0x6b, 0x3e, 0x5c, 0x2c, 0x5f, 0x33, 0x2b, 0x5d, 0x75,
  0x61, 0x1b, 0x28, 0x48, 0x02, 0x39, 0x24, 0x09, 0x1b, 0x24, 0x42, 0x59 };
str = "\ufffd(H9@WUjk.J\\k>\\\u002c_3+]ua\ufffd(H\u00029$\u0009\ufffd";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x3e, 0x7e, 0x76, 0x59, 0x1b, 0x28, 0x49, 0x7d, 0x1b,
  0x24, 0x42, 0x60, 0x6b, 0x4b, 0x61, 0x39, 0x60, 0x38, 0x2e, 0x4d, 0x5a,
  0x65, 0x2c, 0x56, 0x72, 0x62, 0x17, 0x4f, 0x02, 0x23 };
str = ">~vY\ufffd\u743a\u78e8\u9805\u8ed2\u9065\u7d73\u5e64\ufffd\ufffd\ufffd";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x32, 0x35, 0x6b, 0x5d, 0x77, 0x68, 0x6c, 0x26, 0x74,
  0x2c, 0x4b, 0x47, 0x2a, 0x46 };
str = "25k]whl&t\u002cKG*F";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x5d, 0x5b, 0x50, 0x2a, 0x61, 0x4f, 0x60, 0x72, 0x76,
  0x3c, 0x4f, 0x28, 0x6f, 0x56, 0x31, 0x7d, 0x45, 0x4e, 0x73, 0x32, 0x5f,
  0x18, 0x6e, 0x26, 0x62, 0x1b, 0x28, 0x4a, 0x73, 0x2b };
str = "][P*aO`rv<O(oV1}ENs2_\u0018n&bs+";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x4a, 0x7e };
str = "J~";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x5a, 0x20, 0x4b, 0x67, 0x1b, 0x28, 0x49, 0x5d };
str = "Z Kg\uff9d";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x48 };
str = "\ufffd(H";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x49, 0x54, 0x1f, 0x3f, 0x53, 0x69, 0x6c,
  0x5a, 0x53, 0x1b, 0x28, 0x4a, 0x5b, 0x3d, 0x42, 0x62, 0x3e };
str = "\uff94\ufffd\uff7f\uff93\ufffd\ufffd\uff9a\uff93[=Bb>";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x5d, 0x23, 0x09, 0x1c, 0x3f, 0x3e, 0x6b, 0x24, 0x32,
  0x2c, 0x40, 0x78, 0x28, 0x6d, 0x75, 0x4e, 0x77, 0x76, 0x52 };
str = "]#\u0009\u001c?>k$2\u002c@x(muNwvR";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x32, 0x76, 0x61, 0x20, 0x2e, 0x5e, 0x57, 0x69 };
str = "2va .^Wi";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x4a, 0x32, 0x63, 0x3d, 0x63, 0x25, 0x6c,
  0x52, 0x50, 0x51 };
str = "2c=c%lRPQ";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x48, 0x40, 0x1b, 0x28, 0x49, 0x72, 0x3d,
  0x6b, 0x1b, 0x28, 0x49, 0x5d, 0x46, 0x69, 0x4c, 0x1b, 0x28, 0x48, 0x1b,
  0x28, 0x4a, 0x4a };
str = "\ufffd(H@\ufffd\uff7d\ufffd\uff9d\uff86\ufffd\uff8c\ufffd\uff68\uff88J";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x40, 0x43 };
str = "\ufffd";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x4f, 0x65, 0x1b, 0x28, 0x48, 0x6f, 0x40, 0x24, 0x77,
  0x1b, 0x28, 0x48, 0x2c, 0x60, 0x1b, 0x28, 0x49, 0x48, 0x38, 0x3d, 0x39,
  0x5c, 0x70, 0x28, 0x24, 0x47, 0x6e, 0x57, 0x2a, 0x58, 0x1b, 0x24, 0x42 };
str =

  "Oe\ufffd(Ho@$w\ufffd(H\u002c`\uff88\uff78\uff7d\uff79\uff9c\ufffd\uff68\uff64\uff87\ufffd\uff97\uff6a\uff98";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x1b, 0x28, 0x49, 0x5c, 0x7e, 0x1b,
  0x28, 0x42, 0x21, 0x24, 0x47, 0x76, 0x0c, 0x37, 0x56, 0x64, 0x1b, 0x28,
  0x48, 0x1b, 0x28, 0x42, 0x30, 0x75, 0x62, 0x3b };
str = "\ufffd\uff9c\ufffd!$Gv\u000c7Vd\ufffd(H0ub;";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x17, 0x23, 0x05, 0x77, 0x25, 0x56, 0x59, 0x48, 0x67,
  0x7a, 0x1b, 0x28, 0x42, 0x66, 0x1b, 0x24, 0x42, 0x1b, 0x24, 0x42, 0x44,
  0x71, 0x39, 0x41, 0x7a, 0x1b, 0x28, 0x49, 0x04, 0x3a, 0x0c, 0x1b, 0x28,
  0x4a, 0x48 };
str = "\u0017#\u0005w%VYHgzf\ufffd\u62b5\u6e2f\ufffd\ufffd\uff7a\ufffdH";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x49, 0x6a, 0x3d, 0x4b, 0x29, 0x36, 0x25,
  0x69, 0x53, 0x1b, 0x24, 0x42, 0x55, 0x35, 0x4a, 0x41, 0x2a, 0x1b, 0x28,
  0x49, 0x75, 0x1b, 0x28, 0x42, 0x61, 0x7b, 0x32, 0x7c, 0x56, 0x2c, 0x30,
  0x4e, 0x76, 0x28, 0x36, 0x67 };
str =

  "\ufffd\uff7d\uff8b\uff69\uff76\uff65\ufffd\uff93\u5a6c\u67c4\ufffd\ufffda\u007b2|V\u002c0Nv(6g";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x5a, 0x6b, 0x73, 0x26, 0x24, 0x40, 0x34, 0x42, 0x2a,
  0x56, 0x38 };
str = "Zks&$@4B*V8";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x4a, 0x5a };
str = "Z";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x24, 0x58, 0x49, 0x09, 0x41, 0x2a, 0x57, 0x58, 0x5c,
  0x4b, 0x7a, 0x42, 0x73, 0x4e, 0x5e, 0x0d, 0x2f, 0x69, 0x63, 0x53, 0x72,
  0x3f, 0x28, 0x6b, 0x6a };
str = "$XI\u0009A*WX\\KzBsN^\u000d/icSr?(kj";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x1c, 0x4d, 0x37, 0x1b, 0x24, 0x42,
  0x77, 0x77, 0x4a, 0x25, 0x44, 0x1b, 0x28, 0x42, 0x67, 0x74, 0x62, 0x71 };
str = "\ufffd\u904a\ufffd\u6df5\ufffdgtbq";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x20, 0x31, 0x3c, 0x5f, 0x56, 0x3f, 0x77, 0x78, 0x1b,
  0x28, 0x4a, 0x25, 0x72, 0x5d, 0x38, 0x21, 0x37, 0x64, 0x62, 0x2f, 0x56,
  0x59 };
str = " 1<_V?wx%r]8!7db/VY";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x11, 0x70, 0x1a, 0x4b, 0x4d, 0x23, 0x2f, 0x35, 0x60,
  0x27, 0x79, 0x78, 0x1b, 0x28, 0x48, 0x28, 0x12, 0x1b, 0x28, 0x4a };
str = "\u0011p\u001aKM#/5`'yx\ufffd(H(\u0012";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x60, 0x58, 0x1b, 0x28, 0x42, 0x20, 0x3a, 0x4f, 0x36,
  0x44, 0x6d, 0x68 };
str = "`X :O6Dmh";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x46, 0x7b };
str = "F\u007b";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x40, 0x3e, 0x3f, 0x23, 0x4a, 0x37, 0x1b,
  0x28, 0x49, 0x4b, 0x42, 0x69, 0x74, 0x24, 0x37, 0x21 };
str = "\u68a2\uff2a\ufffd\uff8b\uff82\ufffd\ufffd\uff64\uff77\uff61";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x44, 0x7b, 0x4f, 0x39, 0x2e, 0x24, 0x3c, 0x29, 0x76,
  0x38, 0x78, 0x1b, 0x28, 0x49 };
str = "D\u007bO9.$<)v8x";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x65, 0x7e, 0x55, 0x2f, 0x40, 0x1b, 0x24, 0x42, 0x52,
  0x3f, 0x38, 0x33, 0x51, 0x2f, 0x33, 0x6b, 0x51, 0x1b, 0x28, 0x42, 0x6a,
  0x49, 0x23, 0x1b, 0x24, 0x42, 0x17, 0x43, 0x7e, 0x1b, 0x28, 0x49, 0x47,
  0x67, 0x2e };
str = "e~U/@\u5340\u9a13\u5102\u845b\ufffdjI#\ufffd\u5bf5\uff87\ufffd\uff6e";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x35, 0x23, 0x30, 0x1b, 0x24, 0x40, 0x3a, 0x1b, 0x24,
  0x40, 0x6c, 0x4a, 0x1b, 0x28, 0x42, 0x33, 0x72, 0x68, 0x36, 0x2d, 0x5f,
  0x39, 0x58, 0x71, 0x3b, 0x2d, 0x53, 0x1b, 0x28, 0x49, 0x7e, 0x50, 0x7c,
  0x6b, 0x4e };
str = "5#0\ufffd\u8cb63rh6-_9Xq;-S\ufffd\uff90\ufffd\ufffd\uff8e";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x49, 0x1b, 0x28, 0x48, 0x51, 0x21, 0x53,
  0x4b, 0x28, 0x72, 0x1b, 0x24, 0x42, 0x5a, 0x59, 0x3c, 0x2c, 0x19 };
str =
  "\ufffd\uff68\uff88\uff91\uff61\uff93\uff8b\uff68\ufffd\u65db\u8494\ufffd";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x3b, 0x7c, 0x1b, 0x28, 0x4a, 0x37,
  0x44, 0x64, 0x5d, 0x45, 0x1b, 0x28, 0x42, 0x30, 0x40, 0x26, 0x79, 0x25,
  0x4f, 0x7e, 0x27, 0x47, 0x1b, 0x24, 0x40, 0x38, 0x2a, 0x28, 0x21, 0x7c,
  0x67, 0x4d, 0x73, 0x1b, 0x24, 0x40, 0x60 };
str = "\u61487Dd]E0@&y%O~'G\u80a9\u2500\u9bb1\u6b04\ufffd";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x48, 0x27, 0x76, 0x5d, 0x65, 0x48, 0x2a,
  0x28, 0x1b, 0x28, 0x48, 0x43, 0x0b, 0x1b, 0x28, 0x48, 0x6b, 0x31, 0x7c,
  0x23, 0x78, 0x56, 0x60, 0x2c, 0x70, 0x59, 0x78, 0x69 };
str = "\ufffd(H'v]eH*(\ufffd(HC\u000b\ufffd(Hk1|#xV`\u002cpYxi";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x2f, 0x2a, 0x4c, 0x2a, 0x2b, 0x21,
  0x2a, 0x4f, 0x1b, 0x28, 0x48, 0x31, 0x54, 0x32, 0x3a, 0x20, 0x68, 0x1b,
  0x28, 0x49, 0x4a };
str = "\ufffd\u871c\ufffd\ufffd\ufffd\ufffd\u92ed\u7a4f\ufffd\ufffd\uff8a";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x76, 0x79, 0x37 };
str = "vy7";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x48, 0x2d, 0x68, 0x3c, 0x4a, 0x77 };
str = "\ufffd(H-h<Jw";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x19, 0x7f, 0x5c, 0x4f, 0x7a, 0x64, 0x75, 0x29, 0x39,
  0x2b, 0x4b };
str = "\u0019\u007f\\Ozdu)9+K";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x1b, 0x24, 0x40, 0x1b, 0x24, 0x42,
  0x47, 0x1b, 0x28, 0x42, 0x51, 0x53, 0x4f, 0x4a, 0x1b, 0x28, 0x48, 0x3c,
  0x53, 0x52, 0x29, 0x59, 0x1b, 0x24, 0x42, 0x6c, 0x37 };
str = "\ufffd\ufffd\ufffdQSOJ\ufffd(H<SR)Y\u8c6c";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x6a, 0x61, 0x1b, 0x28, 0x49, 0x49, 0x57, 0x52, 0x24,
  0x66, 0x74, 0x42, 0x72, 0x58 };
str = "ja\uff89\uff97\uff92\uff64\ufffd\ufffd\uff82\ufffd\uff98";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x49, 0x42, 0x45, 0x32, 0x6f, 0x64,
  0x65, 0x2e, 0x44, 0x7b };
str = "\u75c5\u8f4d\u95bc\u7d4e\u8a02";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x6d, 0x3c, 0x1b, 0x28, 0x49, 0x71, 0x4e, 0x56, 0x60,
  0x7d, 0x1b, 0x28, 0x49, 0x6a, 0x45, 0x77, 0x20, 0x4c, 0x78, 0x1b, 0x28,
  0x42 };
str = "m<\ufffd\uff8e\uff96\ufffd\ufffd\ufffd\uff85\ufffd\ufffd\uff8c\ufffd";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x40, 0x20, 0x47, 0x26, 0x39, 0x1b, 0x24,
  0x42, 0x1b, 0x24, 0x42 };
str = "\ufffd\u5fcd\ufffd\ufffd";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x40, 0x7e, 0x43, 0x37, 0x6b, 0x22, 0x26,
  0x1b, 0x24, 0x42, 0x3e, 0x56, 0x69, 0x1b, 0x28, 0x42, 0x62, 0x74, 0x5e,
  0x6d, 0x25, 0x76, 0x6f, 0x47, 0x1b, 0x28, 0x4a, 0x2d, 0x25, 0x78, 0x50,
  0x7c, 0x36, 0x6d, 0x3e };
str = "\ufffd\u7d50\u25bd\u8549\ufffdbt^m%voG-%xP|6m>";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x6f, 0x1b, 0x28, 0x42, 0x4a, 0x69,
  0x7a, 0x5e, 0x2b, 0x4c, 0x31, 0x76, 0x50 };
str = "\ufffdJiz^+L1vP";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x26, 0x7c, 0x1b, 0x28, 0x48, 0x65, 0x27, 0x1b, 0x24,
  0x42, 0x2a, 0x37, 0x32, 0x52, 0x75, 0x1b, 0x28, 0x4a, 0x51, 0x47, 0x42,
  0x44, 0x7a, 0x75, 0x46 };
str = "&|\ufffd(He'\ufffd\u798d\ufffdQGBDzuF";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x57, 0x1b, 0x28, 0x42, 0x4f, 0x4d, 0x1b, 0x24, 0x42,
  0x47, 0x74, 0x2a, 0x74, 0x5c, 0x7c, 0x1b, 0x28, 0x4a };
str = "WOM\u7c95\ufffd\u6a84";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x42, 0x24, 0x1b, 0x28, 0x49, 0x30, 0x7a };
str = "$\uff70\ufffd";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x69, 0x21, 0x6f, 0x0e, 0x6d };
str = "i!o\ufffdm";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x48, 0x7b, 0x50, 0x2e, 0x4d, 0x65, 0x68,
  0x61, 0x56, 0x2c, 0x2d, 0x21, 0x4e, 0x50 };
str = "\ufffd(H\u007bP.MehaV\u002c-!NP";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x36, 0x4b, 0x42, 0x40, 0x42, 0x70, 0x4a, 0x59, 0x46 };
str = "6KB@BpJYF";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x4a, 0x2b, 0x1b, 0x24, 0x40, 0x23, 0x21,
  0x1b, 0x28, 0x4a, 0x4f, 0x52, 0x1b, 0x28, 0x42, 0x2a, 0x7d };
str = "+\ufffdOR*}";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x77, 0x33, 0x09, 0x3d, 0x47, 0x41, 0x05, 0x2b, 0x54,
  0x59, 0x59, 0x2c, 0x4f, 0x2e, 0x52, 0x5b, 0x72, 0x63, 0x6d, 0x40, 0x43,
  0x36, 0x62, 0x69, 0x75, 0x51, 0x30 };
str = "w3\u0009=GA\u0005+TYY\u002cO.R[rcm@C6biuQ0";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x29, 0x60, 0x36, 0x6b, 0x5c, 0x40, 0x70, 0x36, 0x50,
  0x5f, 0x7c, 0x56, 0x26, 0x38, 0x2c, 0x5f, 0x7b };
str = ")`6k\\@p6P_|V&8\u002c_\u007b";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x39, 0x4b };
str = "9K";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x20, 0x51, 0x4c, 0x28, 0x6b, 0x69, 0x7e, 0x1b, 0x28,
  0x42, 0x6d, 0x7b, 0x45, 0x66, 0x32, 0x20, 0x79, 0x51, 0x79, 0x7a, 0x31,
  0x1b, 0x28, 0x4a, 0x45, 0x38, 0x38, 0x27, 0x73, 0x47 };
str = " QL(ki~m\u007bEf2 yQyz1E88'sG";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x58, 0x65, 0x6a, 0x06, 0x79, 0x7a, 0x31, 0x55, 0x34,
  0x34, 0x0f, 0x25, 0x76, 0x1b, 0x28, 0x42, 0x71, 0x6b, 0x79, 0x1b, 0x28,
  0x48, 0x47, 0x1b, 0x28, 0x4a, 0x59, 0x59 };
str = "Xej\u0006yz1U44\ufffd%vqky\ufffd(HGYY";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x7b, 0x56, 0x5a, 0x5c, 0x6c, 0x3a, 0x1b, 0x28, 0x49,
  0x4f, 0x31 };
str = "\u007bVZ\\l:\uff8f\uff71";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x26, 0x61, 0x57, 0x33, 0x5d, 0x76 };
str = "&aW3]v";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x2f, 0x51 };
str = "/Q";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x48, 0x4f, 0x72, 0x5a };
str = "\ufffd(HOrZ";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x7c, 0x2c };
str = "|\u002c";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x46, 0x41, 0x6d, 0x51, 0x58, 0x4e, 0x35, 0x1b, 0x24,
  0x42, 0x62, 0x32, 0x4d, 0x3b, 0x22, 0x42, 0x1b, 0x28, 0x4a, 0x59, 0x50,
  0x41, 0x29, 0x44, 0x71, 0x2a, 0x73 };
str = "FAmQXN5\u76ba\u878d\ufffdYPA)Dq*s";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x3a, 0x57, 0x51, 0x7c, 0x4b, 0x33, 0x3e, 0x6d, 0x31 };
str = ":WQ|K3>m1";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x39, 0x33, 0x1b, 0x28, 0x49, 0x7b, 0x56, 0x34, 0x2a,
  0x67, 0x2b, 0x31, 0x40, 0x3f, 0x20, 0x6a, 0x42, 0x2d, 0x29, 0x63, 0x1b,
  0x24, 0x40, 0x6e };
str =

  "93\ufffd\uff96\uff74\uff6a\ufffd\uff6b\uff71\uff80\uff7f\ufffd\ufffd\uff82\uff6d\uff69\ufffd\ufffd";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x40, 0x37, 0x64, 0x7e, 0x1b, 0x24, 0x40,
  0x4a, 0x5e, 0x4a, 0x49, 0x7a, 0x6c, 0x66, 0x4a, 0x1b, 0x28, 0x4a, 0x5e,
  0x00 };
str = "\u9699\ufffd\u8217\u58c1\u6e3c\u7ff3^\u0000";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x67, 0x4a, 0x52, 0x21, 0x13, 0x20, 0x3c, 0x1b, 0x28,
  0x42, 0x58, 0x67, 0x54, 0x1b, 0x24, 0x40, 0x7a, 0x28, 0x54, 0x7a, 0x3e,
  0x6a, 0x52 };
str = "gJR!\u0013 <XgT\u60f2\u5962\u5270\ufffd";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x31, 0x5e, 0x4e, 0x3a };
str = "1^N:";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x49, 0x51, 0x46, 0x1b, 0x28, 0x49, 0x2c,
  0x4f, 0x32, 0x70, 0x39, 0x61, 0x4e, 0x5b, 0x3c, 0x60, 0x29, 0x73, 0x53,
  0x07, 0x67, 0x40 };
str =

  "\uff91\uff86\uff6c\uff8f\uff72\ufffd\uff79\ufffd\uff8e\uff9b\uff7c\ufffd\uff69\ufffd\uff93\ufffd\ufffd\uff80";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x12, 0x5a, 0x25, 0x3e, 0x37, 0x31, 0x5a, 0x22, 0x64 };
str = "\u0012Z%>71Z\"d";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x40, 0x2a, 0x4f, 0x2d, 0x4f, 0x40, 0x51,
  0x6a, 0x4f, 0x73, 0x48 };
str = "\ufffd\u333b\u7a4d\u8881\u9e8b";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x42, 0x64, 0x75, 0x0a, 0x14, 0x25, 0x56,
  0x5b, 0x75, 0x2a, 0x1b, 0x28, 0x48, 0x35, 0x6f };
str = "du\u000a\u0014%V[u*\ufffd(H5o";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x61, 0x3c, 0x7e, 0x1b, 0x28, 0x42, 0x67, 0x32, 0x46,
  0x44, 0x6d, 0x61, 0x41, 0x18, 0x5e, 0x74, 0x5c, 0x70, 0x26, 0x5b, 0x40,
  0x7d, 0x75, 0x6e, 0x21, 0x59, 0x47, 0x1b, 0x28, 0x4a, 0x64 };
str = "a<~g2FDmaA\u0018^t\\p&[@}un!YGd";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x40, 0x66 };
str = "\ufffd";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x4a, 0x40, 0x43, 0x6d, 0x2c, 0x1b, 0x28,
  0x4a, 0x75, 0x5c, 0x1b, 0x28, 0x49, 0x21, 0x61, 0x70, 0x53, 0x2f, 0x5f,
  0x3d, 0x63, 0x36, 0x75, 0x45, 0x60, 0x38 };
str =

  "@Cm\u002cu\u00a5\uff61\ufffd\ufffd\uff93\uff6f\uff9f\uff7d\ufffd\uff76\ufffd\uff85\ufffd\uff78";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x3f, 0x57, 0x68, 0x43, 0x2f, 0x7e, 0x54, 0x5d, 0x5d,
  0x7b, 0x1b, 0x28, 0x48, 0x23, 0x5e, 0x27, 0x75 };
str = "?WhC/~T]]\u007b\ufffd(H#^'u";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x42, 0x68, 0x73, 0x37, 0x25, 0x1a, 0x40,
  0x6d, 0x1b, 0x28, 0x49, 0x7e, 0x65, 0x63, 0x39 };
str = "hs7%\u001a@m\ufffd\ufffd\ufffd\uff79";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x48, 0x76, 0x1b, 0x24, 0x40, 0x34, 0x5b,
  0x5e, 0x1b, 0x28, 0x49, 0x21, 0x1b, 0x28, 0x4a, 0x2d, 0x2a, 0x43, 0x56,
  0x4c, 0x52, 0x3a, 0x37, 0x2a, 0x37, 0x76, 0x2a, 0x57, 0x48, 0x7d, 0x28,
  0x70, 0x2a, 0x41, 0x42 };
str = "\ufffd(Hv\u9928\ufffd\uff61-*CVLR:7*7v*WH}(p*AB";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x7b };
str = "\u007b";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x3a, 0x28, 0x52, 0x70 };
str = ":(Rp";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x4a, 0x22, 0x41, 0x1b, 0x24, 0x42, 0x35,
  0x39, 0x38, 0x22, 0x25, 0x2b, 0x1b, 0x28, 0x42, 0x60, 0x77, 0x1b, 0x24,
  0x42, 0x57, 0x57, 0x37, 0x7c, 0x6a, 0x68, 0x4e, 0x1d, 0x1b, 0x28, 0x49,
  0x4e, 0x5f, 0x67, 0x36, 0x38, 0x1b, 0x28, 0x42 };
str =

  "\"A\u5b9c\u6a29\u30ab`w\u5ffb\u61f8\u8902\ufffd\uff8e\uff9f\ufffd\uff76\uff78";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x48, 0x6c, 0x4b, 0x1b, 0x28, 0x42, 0x3e,
  0x1b, 0x28, 0x4a, 0x57, 0x74, 0x55, 0x1b, 0x28, 0x42, 0x27, 0x1b, 0x24,
  0x42, 0x63, 0x4a, 0x48, 0x67, 0x22, 0x48, 0x2d, 0x26, 0x68, 0x55, 0x23,
  0x5d, 0x27, 0x6b, 0x46, 0x64 };
str = "\ufffd(HlK>WtU'\u7a31\u6ccc\ufffd\u2465\u843c\ufffd\u0449\u51ea";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x24, 0x5c, 0x4e, 0x5b };
str = "$\\N[";
Assert.AreEqual(
 str,
 Encodings.DecodeToString(charset, bytes));
}[Test]
public void TestIso2022JPEncoder() {
byte[] bytes;
string str;
ICharacterEncoding charset = Encodings.GetEncoding("iso-2022-jp");
str = "\uff30\uff57\u6e5b";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x50, 0x23, 0x77, 0x43, 0x39,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff3f\uff26\u8cb6";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x21, 0x32, 0x23, 0x46, 0x6c, 0x4a,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u6042\uff1e";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x57, 0x76, 0x21, 0x64, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff59\u5471\u6785";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x79, 0x52, 0x6d, 0x5b, 0x47,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u5599\uff39\u7232\uff24";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x53, 0x3c, 0x23, 0x59, 0x60, 0x2a,
  0x23, 0x44, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u6b43\u58eb\u6199\u6b27\uff3a";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x5d, 0x3d, 0x3b, 0x4e, 0x58, 0x5a,
  0x32, 0x24, 0x23, 0x5a, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u524a\u50eer\u6f88\u6a8d";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x3a, 0x6f, 0x51, 0x2a, 0x1b, 0x28,
  0x42, 0x72, 0x1b, 0x24, 0x42, 0x7a, 0x6e, 0x5c, 0x7a, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u6b27";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x32, 0x24, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u6a0a\u61b2\u6dfc";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x5c, 0x68, 0x37, 0x7b, 0x7a, 0x68,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff18\u6e1b'\uff32";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x38, 0x38, 0x3a, 0x1b, 0x28,
  0x42, 0x27, 0x1b, 0x24, 0x42, 0x23, 0x52, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u6846\u7b71\u5f66";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x5b, 0x5a, 0x64, 0x2c, 0x49, 0x27,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u9b58\u7827\uff10";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x72, 0x36, 0x35, 0x4e, 0x23, 0x30,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u7368\u0018\uff2d\u765c";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x60, 0x57, 0x1b, 0x28, 0x42, 0x18,
  0x1b, 0x24, 0x42, 0x23, 0x4d, 0x61, 0x75, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u63e9\u8ce4\u78da\u60a0";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x59, 0x62, 0x6c, 0x4d, 0x63, 0x22,
  0x4d, 0x2a, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u79e9";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x43, 0x61, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u78aa\u67b9\uff6b";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x62, 0x74, 0x5b, 0x54, 0x25, 0x29,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u583d\u626e";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x54, 0x4e, 0x4a, 0x31, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff91\u6df9\uff39";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x60, 0x5e, 0x3b, 0x23, 0x59,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u6844";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x7a, 0x4c, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff8a\uff03";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x4f, 0x21, 0x74, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u7e41";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x48, 0x4b, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u7e46";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x65, 0x59, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff7d\u52cd\u5fcc";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x39, 0x52, 0x27, 0x34, 0x77,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff79\u5557\uff3a";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x31, 0x53, 0x38, 0x23, 0x5a,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff81\uff2a\u638f";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x41, 0x23, 0x4a, 0x59, 0x5b,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u6115";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x58, 0x33, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u614a";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x58, 0x44, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u5694";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x53, 0x69, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u6775\uff75\uff26\u75d4";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x35, 0x4f, 0x25, 0x2a, 0x23, 0x46,
  0x3c, 0x26, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff86\u7085\u86fb";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x4b, 0x7a, 0x74, 0x69, 0x68,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u582f";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x74, 0x21, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff81\uff7c";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x41, 0x25, 0x37, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff8c\uff0f\u5df2";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x55, 0x21, 0x3f, 0x56, 0x61,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff31";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x51, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u7d20\u6854\u66f2";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x41, 0x47, 0x35, 0x4b, 0x36, 0x4a,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff37\u6cc4";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x57, 0x5d, 0x75, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff94\uff36\u6874";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x64, 0x23, 0x56, 0x5b, 0x6f,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff96\u70ad\u5db9";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x68, 0x43, 0x3a, 0x79, 0x79,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff9d\uff92\uff41";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x73, 0x25, 0x61, 0x23, 0x61,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u66c4c\u75bd";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x5b, 0x21, 0x1b, 0x28, 0x42, 0x63,
  0x1b, 0x24, 0x42, 0x61, 0x54, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u54b2\u968e";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x3a, 0x69, 0x33, 0x2c, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff33\u84c4";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x53, 0x43, 0x5f, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff97\u62cf\uff8a";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x69, 0x59, 0x3c, 0x25, 0x4f,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u000a";
bytes = new byte[] { 0x0a };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff99";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x6b, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uffe0\u677e\uff08";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x21, 0x71, 0x3e, 0x3e, 0x21, 0x4a,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff9d\u79bf\u7e5a";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x73, 0x46, 0x45, 0x65, 0x67,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff33.\uff48";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x53, 0x1b, 0x28, 0x42, 0x2e,
  0x1b, 0x24, 0x42, 0x23, 0x68, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u58f2\u253f\u514c";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x47, 0x64, 0x28, 0x3b, 0x51, 0x3c,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff0d\u5e9a\u2190";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x21, 0x5d, 0x39, 0x2e, 0x22, 0x2b,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u7c00";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x64, 0x47, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff8a!";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x4f, 0x1b, 0x28, 0x42, 0x21 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff0b";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x21, 0x5c, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u63a0\u5ba2\u6b73";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x4e, 0x2b, 0x35, 0x52, 0x3a, 0x50,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff89\u697c";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x4e, 0x4f, 0x30, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u7e32";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x65, 0x60, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff63\u50b3\u51e9";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x21, 0x57, 0x51, 0x23, 0x51, 0x5e,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u664f";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x5a, 0x67, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff6b";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x29, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u524c\u9d9a\u6518";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x51, 0x6f, 0x73, 0x2d, 0x5a, 0x37,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u7740\uff53\uff95";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x43, 0x65, 0x23, 0x73, 0x25, 0x66,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u59bb";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x3a, 0x4a, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff9f\uff26\u73b3";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x21, 0x2c, 0x23, 0x46, 0x60, 0x5e,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u5dbd\u6e20\u5076";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x56, 0x56, 0x35, 0x74, 0x36, 0x76,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u0014\uff94";
bytes = new byte[] { 0x14, 0x1b, 0x24, 0x42, 0x25, 0x64, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff1b\uff22Y\u5fad";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x21, 0x28, 0x23, 0x42, 0x1b, 0x28,
  0x42, 0x59, 0x1b, 0x24, 0x42, 0x57, 0x54, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u5c02\u212b\uff69";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x40, 0x6c, 0x22, 0x72, 0x25, 0x25,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u51b4\u6a193";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x3a, 0x63, 0x49, 0x38, 0x1b, 0x28,
  0x42, 0x33 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u58c5";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x54, 0x59, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u6dbc\u76db\u71e0";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x4e, 0x43, 0x40, 0x39, 0x5f, 0x7a,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff2c";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x4c, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u6b50\uff58\u2282";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x5d, 0x3f, 0x23, 0x78, 0x22, 0x3e,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u7962\uff65\u5e06";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x47, 0x2a, 0x21, 0x26, 0x48, 0x41,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff7e\u67e2\uff7a";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x3b, 0x5b, 0x52, 0x25, 0x33,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u6adb\uff9c\u51f8";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x36, 0x7b, 0x25, 0x6f, 0x46, 0x4c,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u862d\u7d5c\u536f";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x4d, 0x76, 0x7b, 0x4f, 0x31, 0x2c,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u51ed\uff1b\u2174";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x51, 0x5f, 0x21, 0x28, 0x7c, 0x75,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff53";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x73, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u7b18\u6f5f\uff77";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x63, 0x78, 0x33, 0x63, 0x25, 0x2d,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff4b\u597d\uff91";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x6b, 0x39, 0x25, 0x25, 0x60,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u2192";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x22, 0x2a, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u2266\u53dd\u7dda";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x21, 0x65, 0x79, 0x53, 0x40, 0x7e,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u7015\u4ec0\u000d";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x49, 0x4e, 0x3d, 0x3a, 0x1b, 0x28,
  0x42, 0x0d };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff44\u7d4e\u5164\u5ee0";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x64, 0x65, 0x2e, 0x79, 0x44,
  0x3e, 0x33, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u71c8";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x45, 0x75, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff41\u7d9b\u53d6\uff84";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x61, 0x65, 0x39, 0x3c, 0x68,
  0x25, 0x48, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u767c\u57c8\uff2d\u6483";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x62, 0x24, 0x79, 0x5d, 0x23, 0x4d,
  0x37, 0x62, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff20\uff59\u6960";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x21, 0x77, 0x23, 0x79, 0x46, 0x6f,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u5150\u8b53\uff25\u6c92\u7f47";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x3b, 0x79, 0x7b, 0x6f, 0x23, 0x45,
  0x5d, 0x73, 0x7b, 0x54, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "#";
bytes = new byte[] { 0x23 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u8a8c\u7b48\uff59";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x3b, 0x6f, 0x48, 0x26, 0x23, 0x79,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff66\u5238";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x72, 0x37, 0x74, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u7d2b\u56d1\u698a";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x3b, 0x67, 0x53, 0x76, 0x3a, 0x67,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff30";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x50, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u6a8e\uff77";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x38, 0x69, 0x25, 0x2d, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u6597\u606c\u5a7f";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x45, 0x4d, 0x57, 0x77, 0x4c, 0x3b,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff9c\u529b\u52e3";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x6f, 0x4e, 0x4f, 0x52, 0x2a,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u723b";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x60, 0x2b, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u75d8\u69f9\uff70\uff1b";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x45, 0x77, 0x5c, 0x5f, 0x21, 0x3c,
  0x21, 0x28, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u226a\u6097\u5ea6\u7b99";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x22, 0x63, 0x58, 0x24, 0x45, 0x59,
  0x64, 0x39, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
}
}
}
