package com.upokecenter.test; import com.upokecenter.util.*;

import org.junit.Assert;
import org.junit.Test;
import com.upokecenter.util.*;
import com.upokecenter.text.*;

public class Iso2022JPTest {
@Test
public void TestIso2022JPDecoder() {
byte[] bytes;
String str;
ICharacterEncoding charset = Encodings.GetEncoding("iso-2022-jp");
bytes = new byte[] { 0x75, 0x4e, 0x7d, 0x3c, 0x1b, 0x28, 0x42, 0x7d, 0x7b,
  0x34, 0x20, 0x1b, 0x28, 0x48, 0x78, 0x33, 0x47, 0x51, 0x3d, 0x34, 0x56,
  0x3e, 0x63, 0x1b, 0x28, 0x48, 0x6d, 0x51, 0x41, 0x1b, 0x28, 0x49, 0x73,
  0x43 };
str = "uN}<}\u007b4 \ufffd(Hx3GQ=4V>c\ufffd(HmQA\ufffd\uff83";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x62, 0x06, 0x63, 0x6d, 0x1b, 0x28, 0x4a, 0x74, 0x6c,
  0x54, 0x5b, 0x24, 0x1b, 0x28, 0x42, 0x1b, 0x28, 0x49, 0x3d, 0x6b, 0x71,
  0x28, 0x66, 0x6d };
str = "b\u0006cmtlT[$\ufffd\uff7d\ufffd\ufffd\uff68\ufffd\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x4a, 0x00, 0x1b, 0x28, 0x4a, 0x1b, 0x28, 0x42, 0x48 };
str = "J\u0000\ufffdH";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x4b, 0x55, 0x39, 0x52, 0x39, 0x5c, 0x5b, 0x1b, 0x28,
  0x48, 0x6a, 0x35, 0x4b, 0x78, 0x46, 0x79, 0x50, 0x43, 0x02, 0x2b, 0x38,
  0x79, 0x4e };
str = "KU9R9\\[\ufffd(Hj5KxFyPC\u0002+8yN";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x42, 0x65, 0x2f, 0x5c, 0x4c, 0x11, 0x1b, 0x28, 0x4a,
  0x67, 0x31, 0x36 };
str = "Be/\\L\u0011g16";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x45, 0x74, 0x21, 0x69, 0x01, 0x6a, 0x67, 0x2a, 0x6e,
  0x1b, 0x24, 0x42, 0x65, 0x7e, 0x79, 0x5e, 0x34, 0x70, 0x29, 0x41, 0x46,
  0x3a, 0x59, 0x1b, 0x28, 0x48, 0x3d, 0x51, 0x48, 0x6c, 0x37, 0x7b, 0x1b,
  0x28, 0x48, 0x7e };
str =

  "Et!i\u0001jg*n\u7f3a\u57c7\u57fa\ufffd\u8404\ufffd\ufffd\ufffd\u8853\u7dcb\u61b2\ufffd\ufffd\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x68, 0x2d, 0x73, 0x68, 0x78, 0x63, 0x48, 0x64, 0x42,
  0x52, 0x58, 0x74, 0x42 };
str = "h-shxcHdBRXtB";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x26, 0x54 };
str = "\u03c5";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x62, 0x20, 0x75, 0x47, 0x4c, 0x48, 0x1b, 0x28, 0x49,
  0x6d, 0x6a, 0x5e, 0x22, 0x65, 0x1b, 0x28, 0x49, 0x47, 0x7d, 0x73, 0x7a,
  0x1b, 0x28, 0x4a, 0x4a, 0x2c, 0x57, 0x51, 0x1b, 0x28, 0x49 };
str = "b uGLH\ufffd\ufffd\uff9e\uff62\ufffd\uff87\ufffd\ufffd\ufffdJ\u002cWQ";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x29, 0x42, 0x44, 0x1b, 0x24, 0x42, 0x77, 0x73, 0x48,
  0x4c, 0x59, 0x1b, 0x24, 0x42 };
str = ")BD\ufffd\u822c\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x69, 0x5f, 0x1b, 0x28, 0x42, 0x60, 0x43 };
str = "i_`C";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x41, 0x57, 0x54, 0x2c, 0x07, 0x7c, 0x1b, 0x24, 0x40,
  0x33, 0x41, 0x58, 0x4a, 0x34, 0x5a, 0x69, 0x65, 0x5e, 0x27, 0x1b, 0x28,
  0x4a, 0x42, 0x64 };
str = "AWT\u002c\u0007|\u67ff\u6142\u97d3\u8708\u884dBd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x46 };
str = "\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x22, 0x77, 0x3c, 0x37, 0x38, 0x1b, 0x24, 0x42, 0x49,
  0x29, 0x59 };
str = "\"w<78\u83f1\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x40, 0x4d, 0x76, 0x76, 0x7c };
str = "\u862d\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x4a, 0x7c, 0x3a, 0x78, 0x1b, 0x28, 0x4a,
  0x03, 0x1b, 0x24, 0x40, 0x36, 0x2e, 0x1b, 0x28, 0x48, 0x77, 0x5e, 0x11,
  0x79, 0x1b, 0x24, 0x40, 0x35, 0x68, 0x47, 0x02, 0x6d, 0x7e, 0x54, 0x26,
  0x48, 0x72, 0x12, 0x3e };
str =

  "|:x\u0003\u5ce1\ufffd\ufffd\ufffd\ufffd\ufffd\u7b08\ufffd\u8ff8\u5716\u907f\ufffd\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x71, 0x67, 0x41, 0x72, 0x1b, 0x24, 0x40, 0x1b, 0x28,
  0x48, 0x25, 0x74, 0x5f, 0x58, 0x4d };
str = "qgAr\ufffd\ufffd\u30f4\u70f1\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x49, 0x41, 0x1b, 0x28, 0x4a, 0x3c, 0x2d,
  0x60, 0x71, 0x13, 0x3f, 0x42, 0x71, 0x61, 0x67, 0x79, 0x5c, 0x23, 0x4d,
  0x59, 0x1b, 0x28, 0x49 };
str = "\uff81<-`q\u0013?Bqagy\u00a5#MY";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x69, 0x54, 0x1b, 0x28, 0x49, 0x0e, 0x4b, 0x1b, 0x29,
  0x69, 0x5a, 0x44 };
str = "iT\ufffd\uff8b\ufffd\uff69\ufffd\uff9a\uff84";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x41, 0x7e, 0x78, 0x3d, 0x1b, 0x28, 0x42, 0x4a, 0x1b,
  0x28, 0x4a, 0x66, 0x39, 0x4a, 0x2f, 0x2c, 0x74, 0x24, 0x1b, 0x28, 0x48,
  0x1b, 0x24, 0x42, 0x4e };
str = "A~x=Jf9J/\u002ct$\ufffd(H\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x42, 0x72, 0x5f, 0x49, 0x6b, 0x6b, 0x76, 0x29, 0x7d,
  0x33, 0x1b, 0x24, 0x40, 0x33, 0x45, 0x31, 0x7b, 0x33, 0x4b, 0x51, 0x5e,
  0x6f, 0x1b, 0x28, 0x42, 0x23, 0x4c, 0x2e, 0x6a, 0x27 };
str = "Br_Ikkv)}3\u5687\u592e\u6838\u51e9\ufffd#L.j'";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x77, 0x58, 0x1b, 0x28, 0x4a, 0x72, 0x44, 0x3d, 0x68,
  0x25, 0x3b, 0x38, 0x1b, 0x24, 0x42, 0x41, 0x3a, 0x7a, 0x2a, 0x44, 0x56,
  0x3b, 0x62, 0x76 };
str = "wXrD=h%;8\u5851\u6137\u7db4\u7345\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x48, 0x1b, 0x28, 0x48, 0x3f, 0x7d, 0x46,
  0x62, 0x5d, 0x4d, 0x23, 0x7c, 0x1e, 0x4e, 0x5e, 0x45, 0x36, 0x4c, 0x5f,
  0x48, 0x4e, 0x47, 0x2a, 0x1b, 0x28, 0x48, 0x1b, 0x28, 0x48, 0x1b, 0x28,
  0x4a, 0x51, 0x59, 0x22, 0x50, 0x71, 0x1b, 0x28, 0x48 };
str = "\ufffd(H\ufffd(H?}Fb]M#|\u001eN^E6L_HNG*\ufffd(H\ufffd(HQY\"Pq\ufffd(H";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x62, 0x68, 0x49, 0x5b, 0x72, 0x5d };
str = "bhI.get(r)";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x40, 0x23, 0x53, 0x1b, 0x28, 0x42 };
str = "\uff33";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x47, 0x58, 0x48, 0x55, 0x1b, 0x28, 0x48, 0x5a, 0x3f,
  0x56, 0x7b, 0x38, 0x23, 0x71, 0x5a };
str = "GXHU\ufffd(HZ?V\u007b8#qZ";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x57, 0x37, 0x67, 0x68, 0x37, 0x43, 0x3d, 0x63, 0x6e,
  0x51, 0x43, 0x4a, 0x32, 0x74, 0x7e, 0x36, 0x1b, 0x28, 0x49, 0x66, 0x26 };
str = "W7gh7C=cnQCJ2t~6\ufffd\uff66";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x23, 0x28, 0x64 };
str = "#(d";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x4a };
str = "";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x4a, 0x4f, 0x2b, 0x51, 0x5b, 0x4d, 0x27,
  0x55, 0x42, 0x21, 0x6c, 0x4f, 0x6d, 0x57, 0x3c, 0x2c, 0x25, 0x72, 0x40,
  0x5d, 0x73, 0x1b, 0x28, 0x42, 0x74, 0x20, 0x44, 0x4f, 0x13, 0x5f, 0x5b,
  0x1b, 0x28, 0x42 };
str = "O+Q.get(M'UB!lOmW<\u002c%r@)st DO\u0013_[";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x69, 0x3f, 0x44, 0x50, 0x77, 0x69, 0x7a, 0x34, 0x33,
  0x45, 0x60, 0x7a, 0x45, 0x70, 0x3a, 0x60, 0x6a, 0x4f, 0x67, 0x71, 0x00,
  0x4f };
str = "i?DPwiz43E`zEp:`jOgq\u0000O";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x42, 0x71, 0x5c, 0x43, 0x4f, 0x73, 0x66,
  0x31, 0x34, 0x1b, 0x24, 0x40, 0x3a, 0x73, 0x78, 0x47, 0x63, 0x21, 0x62,
  0x60, 0x35, 0x40, 0x1b, 0x24, 0x42, 0x1b, 0x24, 0x40, 0x7b };
str = "q\\COsf14\u6714\ufffd\u78e7\u77d7\u7947\ufffd\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x42, 0x66, 0x64, 0x1b, 0x28, 0x48, 0x41,
  0x69, 0x68, 0x53, 0x4a, 0x1b, 0x24, 0x40, 0x3f, 0x6e, 0x74, 0x44, 0x2c,
  0x3a, 0x1b, 0x28, 0x42, 0x52, 0x4e };
str = "fd\ufffd(HAihSJ\u9318\ufffd\ufffdRN";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x40, 0x72, 0x42, 0x45, 0x51, 0x7e, 0x34,
  0x25, 0x35, 0x40, 0x7d, 0x2d, 0x48, 0x73, 0x6b, 0x7b, 0x7b, 0x68, 0x26,
  0x51 };
str = "\u9bca\u83df\ufffd\u30b5\u7bad\u3351\u9f21\ufa26\u8340\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x49, 0x6e, 0x1b, 0x28, 0x49, 0x36, 0x61,
  0x62, 0x24, 0x6b };
str = "\ufffd\uff76\ufffd\ufffd\uff64\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x4a };
str = "";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x44, 0x57, 0x7b, 0x3b, 0x7c, 0x62, 0x6a, 0x2b, 0x71,
  0x57, 0x5a, 0x20, 0x3c, 0x55, 0x27, 0x58, 0x69, 0x36, 0x41, 0x43, 0x4d,
  0x6b, 0x77, 0x68, 0x3f, 0x4b, 0x1b, 0x28, 0x49, 0x39, 0x1b, 0x28, 0x49 };
str = "DW\u007b;|bj+qWZ <U'Xi6ACMkwh?K\uff79";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x11 };
str = "\u0011";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x42, 0x3a, 0x49, 0x6a, 0x5d, 0x55, 0x5b,
  0x71, 0x2c, 0x37, 0x1b, 0x24, 0x42, 0x31, 0x50, 0x45, 0x3f, 0x34, 0x20,
  0x75, 0x65, 0x77, 0x79, 0x48, 0x5f };
str = ":Ij]U[q\u002c7\u9834\u985b\ufffd\ufffd\ufffd\u5e87";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x56, 0x60, 0x65, 0x38, 0x6c, 0x69 };
str = "V`e8li";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x6f };
str = "o";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x3f, 0x6f, 0x55, 0x06, 0x6a, 0x48, 0x16, 0x39, 0x55,
  0x7b, 0x20, 0x48, 0x7a, 0x70, 0x47 };
str = "?oU\u0006jH\u00169U\u007b HzpG";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x43, 0x70, 0x65, 0x64, 0x1b, 0x28, 0x48, 0x1b, 0x24,
  0x42 };
str = "Cped\ufffd(H";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x44, 0x49, 0x1b, 0x28, 0x42, 0x4d, 0x7c, 0x3d, 0x3d,
  0x3c, 0x3a, 0x79, 0x3f, 0x36, 0x59, 0x46, 0x58, 0x02, 0x57 };
str = "DIM|==<:y?6YFX\u0002W";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x48, 0x59, 0x50, 0x66, 0x2b, 0x1b, 0x28,
  0x4a, 0x55, 0x4c, 0x34, 0x76, 0x44, 0x7e, 0x4e, 0x3a, 0x5b, 0x57, 0x47,
  0x4d, 0x61, 0x30, 0x79, 0x1b, 0x28, 0x48, 0x1b, 0x24, 0x40, 0x3f, 0x2b,
  0x20, 0x32, 0x7b, 0x7d };
str = "\ufffd(HYPf+UL4vD\u203eN:[WGMa0y\ufffd(H\u8fb1\ufffd\u61d0\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x2a, 0x53, 0x76, 0x53, 0x43, 0x74, 0x37, 0x70, 0x54,
  0x3b, 0x7d, 0x1b, 0x28, 0x4a, 0x48, 0x6b };
str = "*SvSCt7pT;}Hk";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x48, 0x4c, 0x4a };
str = "HLJ";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x40, 0x23, 0x1b, 0x28, 0x4a, 0x77, 0x1b,
  0x24, 0x40, 0x71, 0x7e, 0x67, 0x52, 0x50, 0x1b, 0x28, 0x49, 0x61, 0x24,
  0x31, 0x76, 0x1b, 0x28, 0x42, 0x6a, 0x39, 0x2a, 0x73, 0x28, 0x25, 0x75,
  0x70, 0x45, 0x39, 0x23, 0x31, 0x35 };
str = "\ufffdw\u9af7\u820d\ufffd\ufffd\uff64\uff71\ufffdj9*s(%upE9#15";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x49 };
str = "";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x45, 0x54, 0x34, 0x6c, 0x37, 0x57, 0x66, 0x5c, 0x79,
  0x39, 0x1b, 0x28, 0x49, 0x6b, 0x69, 0x60, 0x51, 0x4f, 0x4e, 0x75, 0x30 };
str = "ET4l7Wf\\y9\ufffd\ufffd\ufffd\uff91\uff8f\uff8e\ufffd\uff70";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x6a, 0x1b, 0x28, 0x42, 0x21, 0x65, 0x24, 0x5a, 0x4c };
str = "j!e$ZL";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x49, 0x5e, 0x2e, 0x1b, 0x28, 0x4a, 0x35,
  0x53, 0x1b, 0x28, 0x4a, 0x4f, 0x68, 0x4e, 0x36, 0x1b, 0x28, 0x48, 0x7d,
  0x34, 0x40, 0x7b, 0x76, 0x23, 0x34, 0x3d };
str = "\uff9e\uff6e5SOhN6\ufffd(H}4@\u007bv#4=";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x49, 0x34, 0x27, 0x49, 0x64 };
str = "I4'Id";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x49, 0x32, 0x26, 0x4a, 0x17, 0x74, 0x63,
  0x6c, 0x3e, 0x2a, 0x1b, 0x28, 0x4a, 0x39, 0x59, 0x49, 0x41, 0x03, 0x71,
  0x3e, 0x7c, 0x2b, 0x32 };
str = "\uff72\uff66\uff8a\ufffd\ufffd\ufffd\ufffd\uff7e\uff6a9YIA\u0003q>|+2";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x37, 0x6a, 0x25, 0x68, 0x57, 0x33, 0x50, 0x6b, 0x3a };
str = "7j%hW3Pk:";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x4a, 0x1b, 0x28, 0x49, 0x68, 0x2c, 0x2c,
  0x57, 0x1b, 0x28, 0x49, 0x57, 0x48, 0x55, 0x3a, 0x77, 0x4e, 0x62, 0x2b,
  0x01, 0x25, 0x5d, 0x2f, 0x6d, 0x24, 0x49, 0x60, 0x5e };
str =

  "\ufffd\ufffd\uff6c\uff6c\uff97\uff97\uff88\uff95\uff7a\ufffd\uff8e\ufffd\uff6b\ufffd\uff65\uff9d\uff6f\ufffd\uff64\uff89\ufffd\uff9e";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x22, 0x66, 0x36, 0x62, 0x47, 0x3e, 0x27, 0x46, 0x48,
  0x37, 0x20, 0x72, 0x5c, 0x3a, 0x36, 0x3a, 0x4d, 0x6e, 0x43, 0x1b, 0x28,
  0x42, 0x34, 0x7d, 0x23, 0x2b, 0x66, 0x41, 0x23 };
str = "\"f6bG>'FH7 r\\:6:MnC4}#+fA#";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x25, 0x28, 0x6e, 0x32, 0x74 };
str = "%(n2t";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x39, 0x4b, 0x7c, 0x1b, 0x28, 0x4a, 0x54, 0x45, 0x43,
  0x7a, 0x4b, 0x1b, 0x28, 0x42, 0x28, 0x1b, 0x28, 0x42, 0x2e, 0x27, 0x57,
  0x1b, 0x28, 0x49, 0x69, 0x2c, 0x3b, 0x2d, 0x7e, 0x39, 0x69, 0x4a };
str = "9K|TECzK(.'W\ufffd\uff6c\uff7b\uff6d\ufffd\uff79\ufffd\uff8a";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x48, 0x3f, 0x01, 0x57, 0x47, 0x1b, 0x28,
  0x4a, 0x5d, 0x1b, 0x24, 0x40, 0x78 };
str = "\ufffd(H?\u0001WG]\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x4a, 0x57, 0x35, 0x6e, 0x27, 0x5a, 0x2a,
  0x74, 0x52, 0x47, 0x36, 0x5e, 0x75, 0x33, 0x7e, 0x22 };
str = "W5n'Z*tRG6^u3\u203e\"";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x44, 0x61, 0x1b, 0x28, 0x4a, 0x3b, 0x31, 0x74, 0x72,
  0x28, 0x1b, 0x28, 0x4a, 0x26, 0x09, 0x4d, 0x7a, 0x62, 0x49, 0x3e, 0x28,
  0x31, 0x5a, 0x3c, 0x0b, 0x5c, 0x45, 0x36, 0x5b, 0x75 };
str = "Da;1tr(&\u0009MzbI>(1Z<\u000b\u00a5E6[u";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x29, 0x54 };
str = ")T";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x49, 0x1b, 0x24, 0x40, 0x54, 0x2b };
str = "I\u5738";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x4a, 0x58, 0x60, 0x5f, 0x35, 0x2b, 0x57,
  0x2d, 0x50, 0x1b, 0x28, 0x4a, 0x61, 0x32, 0x4c, 0x57, 0x5d, 0x1b, 0x38,
  0x7c, 0x4a, 0x5c, 0x69, 0x4c, 0x3d, 0x3e, 0x1b, 0x28, 0x4a, 0x23, 0x1b,
  0x28, 0x48 };
str = "X`_5+W-Pa2LW]\ufffd8|J\u00a5iL=>#\ufffd(H";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x6a, 0x1b, 0x28, 0x48, 0x42, 0x31, 0x56, 0x60, 0x56,
  0x27, 0x4b, 0x52, 0x78, 0x7b, 0x61, 0x1b, 0x28, 0x4a };
str = "j\ufffd(HB1V`V'KRx\u007ba";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x22, 0x56, 0x05, 0x22, 0x7a, 0x2c, 0x68, 0x71, 0x58,
  0x6a, 0x4e, 0x5b, 0x6c, 0x6d, 0x6c, 0x61, 0x50, 0x34, 0x6d, 0x36, 0x41,
  0x44, 0x62, 0x66 };
str = "\"V\u0005\"z\u002chqXjN[lmlaP4m6ADbf";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x7d, 0x4b, 0x1b, 0x28, 0x48, 0x37,
  0x49, 0x1b, 0x28, 0x48, 0x6d, 0x44, 0x73, 0x2b, 0x26 };
str = "\ufffd\ufffd\ufffd\u656c\ufffd\ufffd\u8ee3\u9d6f\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x5f };
str = "_";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x5d, 0x1b, 0x24, 0x42, 0x48, 0x6a, 0x75, 0x6a, 0x21,
  0x52, 0x7e, 0x7c, 0x5d, 0x37, 0x64, 0x27, 0x79, 0x6b };
str = "]\u7891\ufffd\u3008\ufffd\u6b38\u7b75\u5bc0";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x4e, 0x1b, 0x28, 0x49, 0x1b, 0x28, 0x48, 0x4a, 0x38,
  0x6b, 0x6b, 0x2e, 0x26, 0x2b, 0x1b, 0x24, 0x40, 0x1b, 0x28, 0x48, 0x73,
  0x68, 0x53, 0x45, 0x2f, 0x62, 0x23, 0x2a, 0x6b, 0x1b, 0x28, 0x4a, 0x5b,
  0x56, 0x1b, 0x28, 0x49, 0x1b, 0x28, 0x49, 0x2d, 0x2f };
str =

  "N\ufffd\uff68\uff88\uff8a\uff78\ufffd\ufffd\uff6e\uff66\uff6b\ufffd\ufffd\u9f08\u55ae\ufffd\ufffd\ufffd[V\ufffd\uff6d\uff6f";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x4a, 0x73, 0x69, 0x1b, 0x28, 0x49, 0x56,
  0x61, 0x6e, 0x51, 0x64, 0x74, 0x44, 0x2f, 0x34, 0x27, 0x64, 0x6c, 0x78,
  0x2e, 0x3e, 0x37, 0x75, 0x41, 0x2c, 0x46, 0x6f, 0x55, 0x78, 0x1b, 0x24,
  0x42, 0x4d };
str =

  "si\uff96\ufffd\ufffd\uff91\ufffd\ufffd\uff84\uff6f\uff74\uff67\ufffd\ufffd\ufffd\uff6e\uff7e\uff77\ufffd\uff81\uff6c\uff86\ufffd\uff95\ufffd\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x2b, 0x56, 0x26 };
str = "+V&";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x3e, 0x7d, 0x26, 0x60, 0x68, 0x3c, 0x49, 0x21, 0x22,
  0x42, 0x2b, 0x43, 0x20, 0x2b, 0x43, 0x25, 0x2f, 0x65, 0x58 };
str = ">}&`h<I!\"B+C +C%/eX";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x49, 0x40, 0x5a, 0x1b, 0x28, 0x48, 0x75,
  0x65, 0x5b, 0x2e, 0x3c, 0x1b, 0x28, 0x49, 0x60, 0x36, 0x5e, 0x46, 0x2d,
  0x3c, 0x68, 0x52, 0x5a, 0x3c, 0x50, 0x6d, 0x68, 0x78, 0x60 };
str =

  "\uff80\uff9a\ufffd\uff68\uff88\ufffd\ufffd\uff9b\uff6e\uff7c\ufffd\uff76\uff9e\uff86\uff6d\uff7c\ufffd\uff92\uff9a\uff7c\uff90\ufffd\ufffd\ufffd\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x69, 0x24, 0x5d, 0x5a };
str = "i$]Z";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x50, 0x78, 0x2b, 0x62, 0x66, 0x66, 0x3e, 0x25, 0x74,
  0x1b, 0x28, 0x49, 0x1b, 0x28, 0x48, 0x59, 0x32, 0x75, 0x28, 0x21, 0x34,
  0x35, 0x29, 0x60, 0x54, 0x59, 0x1b, 0x24, 0x42, 0x6f, 0x0e, 0x4e, 0x1b,
  0x28, 0x42, 0x38, 0x1b, 0x28, 0x48, 0x31 };
str =

  "Px+bff>%t\ufffd\uff68\uff88\uff99\uff72\ufffd\uff68\uff61\uff74\uff75\uff69\ufffd\uff94\uff99\ufffd\ufffd8\ufffd(H1";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x75, 0x1b, 0x24, 0x40, 0x52, 0x1b, 0x24, 0x40, 0x4a,
  0x7d, 0x67 };
str = "u\ufffd\u65b9\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x5a, 0x74, 0x4f, 0x1b, 0x28, 0x4a, 0x1b, 0x28, 0x49,
  0x42, 0x39, 0x2f, 0x62, 0x42, 0x52, 0x4d, 0x7e, 0x60, 0x14, 0x29, 0x4a,
  0x4c, 0x49, 0x41 };
str =

  "ZtO\ufffd\uff82\uff79\uff6f\ufffd\uff82\uff92\uff8d\ufffd\ufffd\ufffd\uff69\uff8a\uff8c\uff89\uff81";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x49, 0x56, 0x5d, 0x62, 0x3c, 0x3c, 0x46,
  0x4a, 0x53, 0x33 };
str = "\uff96\uff9d\ufffd\uff7c\uff7c\uff86\uff8a\uff93\uff73";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x48, 0x56, 0x5c, 0x68, 0x62, 0x77, 0x3d,
  0x39, 0x2f, 0x1b, 0x28, 0x48, 0x65, 0x5c, 0x6f, 0x43, 0x74, 0x50, 0x51,
  0x36, 0x20, 0x28, 0x6b, 0x79, 0x3b, 0x48, 0x4e, 0x54, 0x1b, 0x28, 0x42,
  0x3e };
str = "\ufffd(HV\\hbw=9/\ufffd(He\\oCtPQ6 (ky;HNT>";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x2a, 0x1b, 0x28, 0x4a, 0x53, 0x61, 0x6e, 0x61, 0x34,
  0x47, 0x4c, 0x54, 0x51, 0x1b, 0x24, 0x42, 0x2f, 0x60, 0x4f, 0x24, 0x5e,
  0x6d, 0x1b, 0x28, 0x42, 0x30, 0x7a, 0x7e, 0x7a, 0x4e, 0x65, 0x69, 0x3a,
  0x40 };
str = "*Sana4GLTQ\ufffd\u5442\u6ed40z~zNei:@";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x49, 0x59, 0x45, 0x37, 0x78, 0x42, 0x36,
  0x5a, 0x56 };
str = "\uff99\uff85\uff77\ufffd\uff82\uff76\uff9a\uff96";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x42 };
str = "";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x44, 0x6d, 0x21, 0x4c, 0x2e, 0x54, 0x2e, 0x1b, 0x28,
  0x4a, 0x3e, 0x3c, 0x46, 0x4d };
str = "Dm!L.T.><FM";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x4a, 0x27, 0x47, 0x1b, 0x28, 0x42, 0x1b,
  0x28, 0x42, 0x6c, 0x55, 0x78, 0x2b, 0x3e, 0x5c, 0x73, 0x66, 0x1b, 0x28,
  0x4a, 0x62, 0x4f, 0x49, 0x7b, 0x6a, 0x7d, 0x2b, 0x65, 0x47 };
str = "'G\ufffdlUx+>\\sfbOI\u007bj}+eG";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x4a, 0x2b, 0x6e, 0x13, 0x4c, 0x53, 0x64,
  0x75, 0x33, 0x4d, 0x55, 0x65, 0x1b, 0x28, 0x49, 0x1b, 0x28, 0x49, 0x50,
  0x2b, 0x47, 0x46, 0x6e, 0x5d, 0x71, 0x1b, 0x28, 0x42 };
str = "+n\u0013LSdu3MUe\ufffd\uff90\uff6b\uff87\uff86\ufffd\uff9d\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x23, 0x69 };
str = "#i";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x6e, 0x4f, 0x21, 0x7b, 0x22, 0x2c, 0x75, 0x1b, 0x24,
  0x42, 0x26, 0x7b, 0x27, 0x4f, 0x52, 0x23, 0x6a, 0x4c, 0x7e, 0x29, 0x6b,
  0x65, 0x3f, 0x6e, 0x3c, 0x61, 0x31, 0x43, 0x3d, 0x53, 0x58, 0x1b, 0x24,
  0x40 };
str =

  "nO!\u007b\"\u002cu\ufffd\ufffd\u52ad\u885e\ufffd\u8af7\u9318\u91c8\u53e1\u4fca\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x48, 0x4c, 0x71, 0x6d, 0x24, 0x3a, 0x6f,
  0x5d, 0x37, 0x29, 0x22, 0x51, 0x1b, 0x28, 0x48, 0x72, 0x1b, 0x24, 0x40,
  0x29, 0x30, 0x3b, 0x34, 0x21, 0x49, 0x53, 0x28 };
str = "\ufffd(HLqm$:o]7)\"Q\ufffd(Hr\ufffd\u60e8\u201d\u54e6";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x7c, 0x28, 0x4c, 0x1b, 0x28, 0x42, 0x6f, 0x37, 0x50,
  0x2b };
str = "|(Lo7P+";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x5a, 0x2a, 0x56, 0x77, 0x49, 0x2d, 0x62, 0x1b, 0x28,
  0x48, 0x54, 0x79, 0x38, 0x34, 0x58, 0x60, 0x29, 0x5b, 0x1b, 0x24, 0x42,
  0x48, 0x2d, 0x1b, 0x28, 0x49, 0x5a, 0x27, 0x61 };
str = "Z*VwI-b\ufffd(HTy84X`)[\u9262\uff9a\uff67\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x63, 0x34, 0x29, 0x5b, 0x2b };
str = "c4)[+";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x59, 0x69, 0x1b, 0x28, 0x48, 0x70, 0x30, 0x2e, 0x70,
  0x6e, 0x49, 0x57, 0x4d, 0x1b, 0x24, 0x42 };
str = "Yi\ufffd(Hp0.pnIWM";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x72, 0x73, 0x39, 0x31, 0x46, 0x7c, 0x50, 0x29 };
str = "rs91F|P)";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x43, 0x6c, 0x63, 0x78, 0x76, 0x42, 0x44, 0x51, 0x1b,
  0x24, 0x42, 0x7b, 0x5c, 0x6a, 0x5d, 0x66, 0x68, 0x5e, 0x2b, 0x1b, 0x24,
  0x42, 0x6d, 0x4a, 0x37 };
str = "ClcxvBDQ\u8448\u88a4\u8086\u6d38\u8f05\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x72, 0x4c, 0x4d, 0x51, 0x2c, 0x58, 0x2f, 0x22, 0x61,
  0x5d, 0x1b, 0x28, 0x4a, 0x75, 0x29, 0x33, 0x33, 0x1b, 0x24, 0x40, 0x2d,
  0x4e, 0x1b, 0x24, 0x42, 0x72, 0x59, 0x3a, 0x1b, 0x24, 0x40, 0x7a, 0x70,
  0x44, 0x6d, 0x6c, 0x2d, 0x24 };
str = "rLMQ\u002cX/\"a]u)33\u334a\u9c0a\ufffd\u6ff5\u5ead\u8b9a\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x4c, 0x5f, 0x1b, 0x28, 0x49, 0x79, 0x2c, 0x4d };
str = "L_\ufffd\uff6c\uff8d";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x53, 0x65, 0x25, 0x2b, 0x74, 0x54, 0x4a, 0x70, 0x6c,
  0x48, 0x59, 0x2f, 0x79, 0x3c, 0x6c, 0x1b, 0x28, 0x49, 0x1b, 0x28, 0x4a,
  0x0d, 0x1b, 0x28, 0x48, 0x7e, 0x30 };
str = "Se%+tTJplHY/y<l\ufffd\u000d\ufffd(H\u203e0";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x45, 0x27, 0x1b, 0x28, 0x48, 0x6b, 0x4d, 0x43, 0x59,
  0x5e, 0x6f, 0x21, 0x59, 0x2c, 0x62, 0x2f, 0x2c, 0x5d, 0x62, 0x31, 0x30,
  0x7c, 0x70, 0x4e, 0x70, 0x23, 0x56, 0x35 };
str = "E'\ufffd(HkMCY^o!Y\u002cb/\u002c]b10|pNp#V5";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
}@Test
public void TestIso2022JPEncoder() {
byte[] bytes;
String str;
ICharacterEncoding charset = Encodings.GetEncoding("iso-2022-jp");
str = "\uff71\u5ecf\u5922\uff19";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x22, 0x56, 0x7e, 0x4c, 0x34,
  0x23, 0x39, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff03";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x21, 0x74, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u6674\uff17\u7dad";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x40, 0x32, 0x23, 0x37, 0x30, 0x5d,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u0018";
bytes = new byte[] { 0x18 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff47";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x67, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff55";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x75, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff8a\u250c\u5993";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x4f, 0x28, 0x23, 0x35, 0x38,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u5185";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x46, 0x62, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u7136\u5634\u65b0";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x41, 0x33, 0x53, 0x5c, 0x3f, 0x37,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u625e\uff6b\uff48";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x59, 0x2a, 0x25, 0x29, 0x23, 0x68,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u73d2\uff81\u7dcb\uff26";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x7b, 0x29, 0x25, 0x41, 0x48, 0x6c,
  0x23, 0x46, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u76ca\u7228\u75e9";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x31, 0x57, 0x60, 0x26, 0x41, 0x69,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u66c4\u7db4\u891c";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x5b, 0x21, 0x44, 0x56, 0x79, 0x22,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u7156";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x5f, 0x6b, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff33\u6770\uff99";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x53, 0x5b, 0x3f, 0x25, 0x6b,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff35";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x55, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uffe4\uff15\u9eb8\u672a";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x7c, 0x7c, 0x23, 0x35, 0x73, 0x50,
  0x4c, 0x24, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u7f8e\u68c8\uff40";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x48, 0x7e, 0x79, 0x29, 0x21, 0x2e,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u86a4\u51c6\uff9c";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x47, 0x42, 0x3d, 0x5a, 0x25, 0x6f,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff73\u5960\u7ad3";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x26, 0x54, 0x7b, 0x63, 0x6a,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u7e37\u55d4d";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x65, 0x5f, 0x53, 0x51, 0x1b, 0x28,
  0x42, 0x64 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u7da0";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x7b, 0x51, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff1f\uff8c\uff9f";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x21, 0x29, 0x25, 0x55, 0x21, 0x2c,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff17\u7f79";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x37, 0x58, 0x6d, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff49\u79a6";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x69, 0x35, 0x7a, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u783f\u6e38\u5324";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x39, 0x5c, 0x5e, 0x62, 0x79, 0x4f,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff75\uff4f\u5b57";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x2a, 0x23, 0x6f, 0x3b, 0x7a,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff22";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x42, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u7c50\uff83A";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x64, 0x5b, 0x25, 0x46, 0x1b, 0x28,
  0x42, 0x41 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff5b";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x21, 0x50, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u2235\u92d0";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x22, 0x68, 0x7c, 0x38, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u6bd2";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x46, 0x47, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff3f\uff77\u74a7\uff0e";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x21, 0x32, 0x25, 0x2d, 0x60, 0x7a,
  0x21, 0x25, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u613e";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x58, 0x41, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u222a\u75ff\u798e";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x22, 0x40, 0x61, 0x5f, 0x44, 0x77,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u83bd\uff98\u7ad5";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x68, 0x4f, 0x25, 0x6a, 0x63, 0x69,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff92\u5ee0";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x61, 0x3e, 0x33, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u59dc\uff07\uff0b\u5e5f";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x55, 0x2a, 0x7c, 0x7d, 0x21, 0x5c,
  0x56, 0x70, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u5bb0";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x3a, 0x4b, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff4c\u6c40^\uff33\ufa17";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x6c, 0x44, 0x75, 0x1b, 0x28,
  0x42, 0x5e, 0x1b, 0x24, 0x42, 0x23, 0x53, 0x7b, 0x3a, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u6c83\u51e7\u56bc\uff6f";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x4d, 0x60, 0x42, 0x7c, 0x53, 0x70,
  0x25, 0x43, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff6c";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x63, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u8479\u6077\u548c";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x68, 0x61, 0x57, 0x6e, 0x4f, 0x42,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff09\uff2e\u541d";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x21, 0x4b, 0x23, 0x4e, 0x52, 0x67,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u52a0\u5b7a\u2523";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x32, 0x43, 0x55, 0x5e, 0x28, 0x32,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u6173";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x58, 0x4c, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff64";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x21, 0x22, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff90\u6238";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x5f, 0x38, 0x4d, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u5ad7";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x55, 0x42, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u659b\uff87";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x5a, 0x4f, 0x25, 0x4c, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u786c\u7cce\u79d8";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x39, 0x45, 0x41, 0x38, 0x48, 0x6b,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff37";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x57, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff51\u2164";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x71, 0x2d, 0x39, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u793e\u7add";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x3c, 0x52, 0x63, 0x6d, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u7662\u7ca5";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x61, 0x78, 0x34, 0x21, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff98\u6e67W";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x6a, 0x4d, 0x2f, 0x1b, 0x28,
  0x42, 0x57 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff9c";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x6f, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u63bb9\u6840";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x41, 0x5f, 0x1b, 0x28, 0x42, 0x39,
  0x1b, 0x24, 0x42, 0x5b, 0x5c, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff1e\u723b\uff42\u552f\uff1a";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x21, 0x64, 0x60, 0x2b, 0x23, 0x62,
  0x4d, 0x23, 0x21, 0x27, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u5efa\u6296\u2282\u5114";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x37, 0x7a, 0x59, 0x35, 0x22, 0x3e,
  0x51, 0x32, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u2019\u5bdf\uff26";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x21, 0x47, 0x3b, 0x21, 0x23, 0x46,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u621d";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x6c, 0x43, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff6a\u7d19\u592a";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x27, 0x3b, 0x66, 0x42, 0x40,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u5c2d\uff2a\uff97\u663f\u2179";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x36, 0x46, 0x23, 0x4a, 0x25, 0x69,
  0x5b, 0x26, 0x7c, 0x7a, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff50\u797a\u6df8";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x70, 0x63, 0x32, 0x7a, 0x66,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u7525\u7c3d\u682a\u5de8\uff92";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x31, 0x79, 0x64, 0x55, 0x33, 0x74,
  0x35, 0x70, 0x25, 0x61, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u5d50";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x4d, 0x72, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff36\uff42\u5b8b\u52b4";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x56, 0x23, 0x62, 0x41, 0x57,
  0x4f, 0x2b, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u0001\u5948\u7680";
bytes = new byte[] { 0x01, 0x1b, 0x24, 0x42, 0x46, 0x60, 0x62, 0x25, 0x1b,
  0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff39\uff6c\u627e";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x59, 0x25, 0x63, 0x59, 0x32,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff08\u793e\uff3e";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x21, 0x4a, 0x3c, 0x52, 0x21, 0x30,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u653e";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x4a, 0x7c, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff26\u543d\u611a\uff48\u58ae";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x46, 0x52, 0x5f, 0x36, 0x72,
  0x23, 0x68, 0x54, 0x58, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u7be4\u505a";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x46, 0x46, 0x50, 0x76, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u5143";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x38, 0x35, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u6c9b\uffe5";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x5d, 0x6f, 0x21, 0x6f, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff3e";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x21, 0x30, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u7e82";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x3b, 0x3c, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff54";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x74, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff46\u50f4";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x66, 0x79, 0x41, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff79\u6ff3\u52bc";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x31, 0x5f, 0x2b, 0x52, 0x24,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u5bd0";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x55, 0x67, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff76";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x2b, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u636b";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x59, 0x5f, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u7460\uff63";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x4e, 0x5c, 0x21, 0x57, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff70";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x21, 0x3c, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u6dcf";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x7a, 0x65, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u001a\u776b\u7646";
bytes = new byte[] { 0x1a, 0x1b, 0x24, 0x42, 0x62, 0x4c, 0x61, 0x74, 0x1b,
  0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u53e5";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x36, 0x67, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff41\u7b50\u6590";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x61, 0x63, 0x7e, 0x48, 0x65,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u8749\uff87\uff2f";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x40, 0x66, 0x25, 0x4c, 0x23, 0x4f,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff5d";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x21, 0x51, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff1c\u6e20\u62dd";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x21, 0x63, 0x35, 0x74, 0x47, 0x52,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u25bd\u7121\u2537";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x22, 0x26, 0x4c, 0x35, 0x28, 0x3a,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u5c06\uff32\uff58";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x3e, 0x2d, 0x23, 0x52, 0x23, 0x78,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff12\u52f5\u6488";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x32, 0x52, 0x2f, 0x59, 0x7d,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u6912";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x5c, 0x25, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff8d\u5d6d\uff88";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x58, 0x79, 0x77, 0x25, 0x4d,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff23";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x43, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff4e\uff2b\u9bd6";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x6e, 0x23, 0x4b, 0x3b, 0x2a,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
}
}
