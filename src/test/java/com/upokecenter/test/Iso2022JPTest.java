package com.upokecenter.test; import com.upokecenter.util.*;

import org.junit.Assert;
import org.junit.Test;
import com.upokecenter.util.*;
import com.upokecenter.text.*;

public class Iso2022JPTest {
@Test
public void TestIso2022JPDecoder() {
byte[] bytes;
String str;
ICharacterEncoding charset = Encodings.GetEncoding("iso-2022-jp");
bytes = new byte[] { 0x64, 0x63, 0x25, 0x76, 0x65, 0x1b, 0x28, 0x4a, 0x3b };
str = "dc%ve;";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x46, 0x4a };
str = "\u6803";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x5e, 0x6a, 0x21, 0x6a, 0x60, 0x33, 0x4e, 0x77, 0x56,
  0x4a, 0x59, 0x5b, 0x4a, 0x23, 0x5f, 0x76, 0x2b, 0x1b, 0x24, 0x40, 0x31,
  0x7e, 0x55, 0x52, 0x1b, 0x28, 0x42, 0x4d, 0x31, 0x74, 0x2d, 0x41 };
str = "^j!j`3NwVJY[J#_v+\u5fdc\u5b40M1t-A";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x4b, 0x75, 0x5f, 0x62, 0x1b, 0x28, 0x4a, 0x1b, 0x24,
  0x40, 0x38, 0x4c, 0x23 };
str = "Ku_b\ufffd\u5f27\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x32, 0x76, 0x3c, 0x75, 0x6f, 0x6a, 0x52, 0x5f };
str = "2v<uojR_";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x3a, 0x4d, 0x47 };
str = "\u624d\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x48, 0x40, 0x77, 0x6e };
str = "\ufffd(H@wn";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x4e, 0x1b, 0x28, 0x42, 0x53, 0x35, 0x1b, 0x28, 0x48,
  0x2d, 0x2c, 0x2f, 0x78, 0x69, 0x58, 0x1b, 0x28, 0x4a, 0x6c };
str = "NS5\ufffd(H-\u002c/xiXl";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x04, 0x4f, 0x31, 0x6f, 0x7d };
str = "\u0004O1o}";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x58, 0x4c, 0x51, 0x16, 0x40, 0x66, 0x31, 0x1b, 0x24,
  0x42, 0x59, 0x68, 0x50 };
str = "XLQ\u0016@f1\u63f6\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x44, 0x56, 0x27 };
str = "DV'";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x49, 0x3a };
str = "\uff7a";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x48, 0x3a, 0x41, 0x59, 0x1b, 0x28, 0x4a,
  0x24, 0x31, 0x4d, 0x5b, 0x2d, 0x75, 0x35, 0x1b, 0x24, 0x40, 0x5c, 0x2a,
  0x4f, 0x65, 0x62, 0x79, 0x50, 0x1b, 0x28, 0x49, 0x52, 0x31, 0x3e, 0x52,
  0x30, 0x45, 0x0d };
str =

  "\ufffd(H:AY$1M[-u5\u68f9\ufffd\u78d4\ufffd\uff92\uff71\uff7e\uff92\uff70\uff85\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x49, 0x74, 0x51, 0x23, 0x2e, 0x27, 0x77,
  0x27, 0x1b, 0x28, 0x48, 0x5e };
str = "\ufffd\uff91\uff63\uff6e\uff67\ufffd\uff67\ufffd\uff68\uff88\uff9e";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x49, 0x6b, 0x7c, 0x76, 0x41, 0x4d, 0x5d,
  0x3f };
str = "\ufffd\ufffd\ufffd\uff81\uff8d\uff9d\uff7f";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x76, 0x3c, 0x4a, 0x4d, 0x5e };
str = "v<JM^";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x3c, 0x2e, 0x67, 0x1b, 0x28, 0x48, 0x1b, 0x28, 0x49 };
str = "<.g\ufffd(H";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x4a, 0x30 };
str = "0";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x77, 0x64, 0x2e, 0x42, 0x2e, 0x00, 0x7a, 0x47, 0x34,
  0x5f, 0x5e, 0x57, 0x2e, 0x3e, 0x1b, 0x28, 0x42, 0x7d, 0x6e, 0x35, 0x25,
  0x5c, 0x70, 0x30, 0x3d };
str = "wd.B.\u0000zG4_^W.>}n5%\\p0=";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x2a, 0x1b, 0x28, 0x42, 0x70, 0x5a, 0x46, 0x10, 0x74,
  0x7b, 0x1b, 0x24, 0x42, 0x60, 0x30, 0x73, 0x47, 0x48, 0x57, 0x3a, 0x74,
  0x51, 0x78, 0x4f };
str = "*pZF\u0010t\u007b\u724b\u9e88\u76e4\u67f5\u528d\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x5f, 0x30, 0x37, 0x52, 0x6b, 0x7c, 0x22, 0x3d, 0x60,
  0x23, 0x54, 0x33, 0x75, 0x22, 0x0e, 0x49, 0x2f, 0x1b, 0x28, 0x48, 0x65,
  0x26, 0x30, 0x1b, 0x28, 0x4a, 0x2b, 0x30, 0x74, 0x34, 0x61 };
str = "_07Rk|\"=`#T3u\"\ufffdI/\ufffd(He&0+0t4a";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x75, 0x40, 0x64, 0x1b, 0x24, 0x42,
  0x79, 0x73, 0x48, 0x4d };
str = "\ufffd\ufffd\u5d27\u85e9";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x43, 0x5c, 0x2f, 0x01, 0x41, 0x29,
  0x46, 0x1b, 0x24, 0x40, 0x2d, 0x6e, 0x29, 0x5f, 0x6a, 0x3c, 0x76, 0x3d,
  0x55, 0x38, 0x73, 0x38, 0x78 };
str = "\u755c\ufffd\u8df5\ufffd\u337d\ufffd\u880e\ufffd\u5a36\u9dc2\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x76, 0x45, 0x3f, 0x3e, 0x4b, 0x7d, 0x6b, 0x30, 0x3b,
  0x31, 0x73 };
str = "vE?>K}k0;1s";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x31, 0x44, 0x2d, 0x39, 0x7c, 0x4c,
  0x51, 0x65, 0x1b, 0x35, 0x7d, 0x3e, 0x5b, 0x29, 0x1b, 0x28, 0x48, 0x42,
  0x56, 0x78, 0x4e, 0x40, 0x22, 0x7c, 0x21, 0x6f };
str =

  "\u55b6\u2164\u9445\u5214\ufffd\u4eab\u8a54\ufffd\ufffd\ufffd\u614b\ufffd\u647a\u91d7\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x26, 0x42, 0x61, 0x7b, 0x54, 0x6d, 0x3b, 0x7c, 0x25,
  0x36, 0x4d, 0x28, 0x2d, 0x67, 0x24, 0x69, 0x42 };
str = "&Ba\u007bTm;|%6M(-g$iB";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x42, 0x34, 0x7b, 0x38, 0x31, 0x1b, 0x24,
  0x40, 0x49, 0x66, 0x6c, 0x4e, 0x20, 0x4f, 0x6f, 0x39, 0x35, 0x71, 0x4b,
  0x29, 0x40, 0x35, 0x62, 0x6c, 0x2b, 0x20 };
str = "4\u007b81\u819a\u8ce3\ufffd\ufffd\u63a7\u99db\ufffd\u6c72\u8b96\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x49, 0x66, 0x27 };
str = "\ufffd\uff67";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x67, 0x78, 0x55, 0x36, 0x20, 0x18, 0x4e, 0x74, 0x1b,
  0x28, 0x4a, 0x74, 0x44, 0x63 };
str = "gxU6 \u0018NttDc";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x23, 0x3c, 0x4b, 0x53, 0x4a, 0x4a, 0x73, 0x2b, 0x36,
  0x42, 0x45, 0x44, 0x32, 0x61, 0x22, 0x55, 0x31, 0x33, 0x7e, 0x51, 0x74,
  0x6a, 0x35, 0x5f, 0x6c, 0x47, 0x5a };
str = "#<KSJJs+6BED2a\"U13~Qtj5_lGZ";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x64, 0x34, 0x6f, 0x29, 0x6a, 0x4e, 0x3d };
str = "d4o)jN=";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x42, 0x58, 0x39, 0x54, 0x6d, 0x65, 0x37,
  0x72, 0x32, 0x2b, 0x10, 0x1b, 0x28, 0x49, 0x2d, 0x33, 0x5f };
str = "X9Tme7r2+\u0010\uff6d\uff73\uff9f";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x48, 0x4a, 0x48, 0x59, 0x4c, 0x50, 0x4a,
  0x1b, 0x28, 0x49, 0x4e, 0x1b, 0x28, 0x48, 0x5c, 0x75, 0x26, 0x42, 0x1b,
  0x28, 0x48, 0x74, 0x66, 0x6e, 0x1b, 0x28, 0x48, 0x26, 0x5b, 0x57 };
str =

  "\ufffd(HJHYLPJ\uff8e\ufffd\uff68\uff88\uff9c\ufffd\uff66\uff82\ufffd\uff68\uff88\ufffd\ufffd\ufffd\ufffd\uff68\uff88\uff66\uff9b\uff97";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x20, 0x4c, 0x20, 0x77, 0x7b, 0x3d, 0x1b, 0x28, 0x48,
  0x61 };
str = " L w\u007b=\ufffd(Ha";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x4a };
str = "";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x6a, 0x59, 0x37, 0x4c };
str = "\u88ae\u6e13";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x6a, 0x66, 0x1b, 0x24, 0x42, 0x53, 0x44, 0x59, 0x22,
  0x44, 0x56, 0x22, 0x49, 0x0d };
str = "jf\u559e\u6221\u7db4\ufffd\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x44, 0x5f, 0x1b, 0x24, 0x40, 0x31, 0x31, 0x44, 0x32,
  0x52, 0x2b, 0x66, 0x5d, 0x23, 0x11, 0x43, 0x26, 0x1b, 0x28, 0x4a, 0x1b,
  0x24, 0x40, 0x3b, 0x38, 0x1b, 0x28, 0x4a, 0x4e, 0x69, 0x35, 0x4c, 0x18,
  0x2c, 0x22 };
str = "D_\u81fc\u8178\u52e6\u805f\ufffd\u8131\ufffd\u71e6Ni5L\u0018\u002c\"";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x5b, 0x6b, 0x6a, 0x2a, 0x5d, 0x40, 0x1b, 0x28, 0x4a,
  0x79, 0x7a, 0x48, 0x40, 0x2a, 0x14, 0x6d, 0x3f, 0x4d, 0x23, 0x78 };
str = "[kj*]@yzH@*\u0014m?M#x";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x48, 0x13, 0x3c, 0x61, 0x2a, 0x1b, 0x28,
  0x42, 0x47, 0x3d, 0x1b, 0x28, 0x48, 0x75, 0x44, 0x73, 0x68, 0x23, 0x43 };
str = "\ufffd(H\u0013<a*G=\ufffd(HuDsh#C";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x4a, 0x31, 0x4b, 0x4e, 0x1b, 0x28, 0x42,
  0x69, 0x49, 0x2d, 0x33, 0x27, 0x61, 0x20, 0x23, 0x58, 0x7d, 0x27, 0x28 };
str = "1KNiI-3'a #X}'(";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x42, 0x76, 0x35, 0x62, 0x29, 0x7c, 0x1b,
  0x28, 0x42, 0x67, 0x2c, 0x52, 0x3d, 0x68, 0x31, 0x14, 0x4c, 0x59, 0x1b,
  0x24, 0x42, 0x1b, 0x28, 0x42, 0x44, 0x7c, 0x78 };
str = "v5b)|g\u002cR=h1\u0014LY\ufffdD|x";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x3d, 0x2f, 0x2d, 0x5b, 0x6b, 0x3e, 0x67, 0x2e, 0x44,
  0x1b, 0x24, 0x42, 0x32, 0x20, 0x7c, 0x5a, 0x1b, 0x28, 0x49, 0x50, 0x7e,
  0x22, 0x32, 0x45 };
str = "=/-[k>g.D\ufffd\u9857\uff90\ufffd\uff62\uff72\uff85";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x63, 0x44, 0x28, 0x77, 0x53, 0x63, 0x38, 0x5a, 0x23,
  0x1b, 0x28, 0x42, 0x4a, 0x69 };
str = "cD(wSc8Z#Ji";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x42, 0x52, 0x61, 0x7d, 0x48, 0x2e, 0x56,
  0x35, 0x51, 0x53, 0x5c, 0x41, 0x4b, 0x6a, 0x1b, 0x24, 0x42, 0x26, 0x5f,
  0x55, 0x6b, 0x7d, 0x33, 0x4c, 0x22, 0x48, 0x1b, 0x24, 0x40, 0x2d, 0x2f };
str = "Ra}H.V5QS\\AKj\ufffd\u5bde\ufffd\u8513\ufffd\u246e";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x59, 0x25, 0x1b, 0x24, 0x40, 0x4d, 0x5a, 0x50, 0x63,
  0x1b, 0x24, 0x40, 0x0a, 0x46, 0x6f, 0x2a, 0x5f };
str = "Y%\u9065\u5014\ufffd\u6960\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x4b, 0x2e, 0x20, 0x1b, 0x28, 0x48, 0x52, 0x56, 0x3f,
  0x3b, 0x78, 0x6d, 0x71, 0x62, 0x24, 0x58, 0x1d, 0x1b, 0x28, 0x48, 0x5d,
  0x27, 0x4b, 0x46, 0x1e, 0x59, 0x5a, 0x60, 0x65, 0x2c, 0x6a, 0x36 };
str = "K. \ufffd(HRV?;xmqb$X\u001d\ufffd(H]'KF\u001eYZ`e\u002cj6";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x23, 0x69, 0x23, 0x54 };
str = "#i#T";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x42, 0x48 };
str = "H";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x63, 0x4e, 0x4f, 0x3d, 0x1b, 0x4c, 0x61, 0x6c, 0x41,
  0x40, 0x7d, 0x38, 0x4c, 0x2b, 0x66 };
str = "cNO=\ufffdLalA@}8L+f";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x39, 0x69, 0x04, 0x49, 0x4c, 0x42, 0x50, 0x29, 0x50,
  0x1b, 0x28, 0x4a, 0x1b, 0x24, 0x42, 0x42, 0x20, 0x31, 0x2f, 0x13, 0x49,
  0x4f, 0x52, 0x5c, 0x56, 0x5a, 0x3b, 0x51, 0x50, 0x2e, 0x6f };
str =
  "9i\u0004ILBP)P\ufffd\ufffd\u4e11\ufffd\u8ca7\u53ed\u5dc9\u59ff\u8c6b\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x62, 0x7b, 0x1b, 0x28, 0x48, 0x3f, 0x74, 0x65, 0x2e,
  0x46, 0x3a, 0x2d, 0x48, 0x4f, 0x48, 0x21, 0x23, 0x1b, 0x24, 0x42, 0x65,
  0x59, 0x24, 0x44, 0x1b, 0x28, 0x48, 0x75, 0x5b, 0x68, 0x1b, 0x24, 0x42,
  0x72, 0x1b, 0x24, 0x42, 0x60 };
str =
  "b\u007b\ufffd(H?te.F:-HOH!#\u7e46\u3064\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x74, 0x1b, 0x24, 0x42, 0x1b, 0x28, 0x48 };
str = "t\ufffd\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x6d, 0x67, 0x5b, 0x51, 0x45, 0x51,
  0x21, 0x44, 0x28, 0x26, 0x60, 0x1b, 0x28, 0x4a, 0x2b, 0x6c, 0x6b, 0x69,
  0x1b, 0x24, 0x40, 0x2d, 0x56, 0x2b, 0x52, 0x40, 0x23, 0x51 };
str = "\u8faf\u67dd\u83df\u2026\u2514\ufffd+lki\u33a1\ufffd\u5bf8\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x40, 0x35, 0x1b, 0x28, 0x42, 0x41, 0x7b,
  0x51, 0x27, 0x59, 0x4b, 0x79, 0x7b };
str = "\ufffdA\u007bQ'YKy\u007b";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x40, 0x5f, 0x25, 0x75, 0x76, 0x62, 0x6b,
  0x5a, 0x75, 0x1b, 0x28, 0x49, 0x1b, 0x24, 0x40, 0x1b, 0x28, 0x48 };
str = "\u6f7a\ufffd\u7845\u668e\ufffd\ufffd\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x49, 0x47, 0x4c, 0x4f, 0x6b, 0x46,
  0x5d, 0x02, 0x26, 0x48, 0x67, 0x61, 0x77, 0x51, 0x6c, 0x5b, 0x64, 0x55,
  0x3b };
str = "\u849c\u6a21\u8a41\ufffd\u03b8\u8268\ufffd\u8d13\u7c3d\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x3a, 0x54, 0x69, 0x49, 0x30 };
str = ":TiI0";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x43, 0x36, 0x4e, 0x57, 0x4a, 0x2d, 0x1b, 0x28, 0x42,
  0x1d, 0x2a, 0x27, 0x59, 0x5b, 0x57, 0x55, 0x66, 0x69, 0x68, 0x57, 0x24,
  0x38, 0x7d, 0x2e, 0x55, 0x6a, 0x2e, 0x64, 0x75 };
str = "C6NWJ-\u001d*'Y[WUfihW$8}.Uj.du";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x40, 0x74, 0x58, 0x40, 0x29, 0x67, 0x5e,
  0x2b, 0x74, 0x7c, 0x58, 0x60, 0x34, 0x7d, 0x7a, 0x7e, 0x3b };
str = "\ufffd\u5236\u825f\ufffd\u9751\u7282\ufffd\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x3f, 0x68, 0x42, 0x7a, 0x76, 0x41, 0x32, 0x23, 0x4f,
  0x4c, 0x2b };
str = "?hBzvA2#OL+";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x69, 0x72, 0x58, 0x4a, 0x3f, 0x71, 0x69 };
str = "irXJ?qi";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x45, 0x68, 0x1b, 0x24, 0x42, 0x6b, 0x2e, 0x5e, 0x1b,
  0x28, 0x42, 0x53, 0x45, 0x7e, 0x6c, 0x4f, 0x6e, 0x1b, 0x28, 0x42, 0x21,
  0x1b, 0x28, 0x49, 0x7c, 0x2a, 0x3d };
str = "Eh\u89a1\ufffdSE~lOn!\ufffd\uff6a\uff7d";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x42, 0x1b, 0x28, 0x49, 0x30, 0x62, 0x1b,
  0x28, 0x48, 0x28, 0x30, 0x4c, 0x67, 0x2d, 0x68, 0x1b, 0x24, 0x42, 0x38,
  0x1b, 0x24, 0x40, 0x53, 0x4f, 0x70, 0x68 };
str =

  "\ufffd\uff70\ufffd\ufffd\uff68\uff88\uff68\uff70\uff8c\ufffd\uff6d\ufffd\ufffd\u55dc\u97c6";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x49, 0x42, 0x2e, 0x45, 0x41, 0x23, 0x1b,
  0x28, 0x42, 0x4c, 0x75, 0x2c, 0x19, 0x59, 0x5b, 0x60, 0x76, 0x48, 0x4b,
  0x4a, 0x72, 0x69, 0x64, 0x47, 0x4e, 0x31, 0x1c, 0x75, 0x57, 0x36 };
str = "\uff82\uff6e\uff85\uff81\uff63Lu\u002c\u0019Y[`vHKJridGN1\u001cuW6";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x49, 0x6c, 0x7b, 0x53, 0x2f, 0x71, 0x7d,
  0x63, 0x2d };
str = "\ufffd\ufffd\uff93\uff6f\ufffd\ufffd\ufffd\uff6d";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x26, 0x4a, 0x76, 0x55, 0x56, 0x59, 0x31, 0x59, 0x1b,
  0x24, 0x40, 0x5b, 0x2c, 0x48, 0x6d, 0x57, 0x1b, 0x24, 0x42, 0x63, 0x32,
  0x73, 0x53, 0x3c, 0x76, 0x6c, 0x23, 0x7d, 0x3f };
str = "&JvUVY1Y\u670f\u7f77\ufffd\u797a\u9761\u546a\u8b6f\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x42, 0x6a, 0x37, 0x43, 0x25, 0x74, 0x18,
  0x2a, 0x04 };
str = "j7C%t\u0018*\u0004";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x3c, 0x48, 0x1b, 0x24, 0x42, 0x55, 0x1b, 0x24, 0x40,
  0x11, 0x73, 0x2c };
str = "<H\ufffd\ufffd\u9d7a";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x7b, 0x2f, 0x46, 0x4b, 0x4e, 0x72, 0x2a, 0x69, 0x67,
  0x1b, 0x28, 0x4a };
str = "\u007b/FKNr*ig";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x69, 0x3a, 0x48, 0x31, 0x36, 0x65, 0x6b, 0x23, 0x59,
  0x1b, 0x24, 0x40, 0x5c, 0x3c, 0x62, 0x69, 0x07, 0x6a, 0x60, 0x23, 0x4d,
  0x70, 0x69, 0x45, 0x23, 0x2f, 0x5d };
str = "i:H16ek#Y\u6974\u7820\ufffd\u88b1\uff2d\u97c8\u91d8\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x34, 0x24, 0x6d, 0x62, 0x62, 0x1b,
  0x28, 0x42, 0x1b, 0x28, 0x48, 0x27, 0x25, 0x2e, 0x7a, 0x23, 0x1b, 0x28,
  0x48, 0x50, 0x65, 0x1b, 0x28, 0x42, 0x64, 0x62, 0x6b, 0x2e, 0x7b };
str = "\u74e6\u8f64\ufffd\ufffd(H'%.z#\ufffd(HPedbk.\u007b";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x49, 0x1b, 0x28, 0x49, 0x7f, 0x7c, 0x3a,
  0x1b, 0x24, 0x40, 0x7e, 0x71, 0x6e, 0x43, 0x4c, 0x78, 0x4b, 0x53, 0x1b,
  0x24, 0x42, 0x73, 0x1b, 0x28, 0x4a, 0x7a, 0x6b, 0x3c };
str = "\ufffd\ufffd\ufffd\uff7a\ufffd\u9130\u67f3\u7766\ufffdzk<";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x4a, 0x3e };
str = "\u5e63";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x67, 0x72, 0x43, 0x03, 0x76, 0x2f, 0x45, 0x2e, 0x28,
  0x41, 0x7d, 0x30, 0x62, 0x59, 0x26, 0x23, 0x53, 0x53, 0x39, 0x22, 0x61,
  0x3a };
str = "grC\u0003v/E.(A}0bY&#SS9\"a:";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x2b, 0x3e, 0x47, 0x49, 0x4d, 0x1b, 0x24, 0x42, 0x43,
  0x74, 0x3b, 0x25, 0x2c, 0x66, 0x1b, 0x28, 0x42, 0x7b, 0x2b, 0x5f, 0x57,
  0x6a, 0x71, 0x21, 0x64, 0x76, 0x66, 0x58, 0x64, 0x33 };
str = "+>GIM\u6a17\u672d\ufffd\u007b+_Wjq!dvfXd3";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x4a, 0x75, 0x5e, 0x5e, 0x36, 0x18, 0x67,
  0x38, 0x40, 0x73, 0x1b, 0x28, 0x48, 0x50, 0x1b, 0x28, 0x48, 0x36, 0x4c,
  0x1b, 0x28, 0x42, 0x6f };
str = "u^^6\u0018g8@s\ufffd(HP\ufffd(H6Lo";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x4a, 0x4e, 0x0d, 0x1b, 0x28, 0x48, 0x50,
  0x4d, 0x74, 0x78 };
str = "N\u000d\ufffd(HPMtx";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x4a, 0x68, 0x65, 0x6c };
str = "hel";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x31, 0x22, 0x6c, 0x69, 0x1b, 0x28, 0x49, 0x4f, 0x06,
  0x6e, 0x1b, 0x28, 0x49, 0x59, 0x51, 0x2c, 0x2d, 0x56, 0x22, 0x01, 0x1b,
  0x24, 0x40, 0x5e, 0x70 };
str = "1\"li\uff8f\ufffd\ufffd\uff99\uff91\uff6c\uff6d\uff96\uff62\ufffd\u6ea5";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x27, 0x6a, 0x37, 0x3a, 0x3f, 0x62, 0x1b, 0x28, 0x48,
  0x76, 0x63 };
str = "'j7:?b\ufffd(Hvc";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x4e, 0x41, 0x4a, 0x4d, 0x3e, 0x58, 0x53, 0x25, 0x3c,
  0x78, 0x1b, 0x28, 0x42, 0x42, 0x4f, 0x64, 0x7d, 0x3c, 0x47, 0x4d, 0x0c,
  0x60, 0x4a, 0x5a, 0x41, 0x30, 0x21, 0x1b, 0x24, 0x42 };
str = "NAJM>XS%<xBOd}<GM\u000c`JZA0!";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x40, 0x36, 0x1b, 0x24, 0x42, 0x5e, 0x34,
  0x43, 0x3e, 0x76, 0x20, 0x24, 0x1b, 0x28, 0x49, 0x3f, 0x76, 0x6d, 0x35,
  0x59, 0x71, 0x2c, 0x1b, 0x24, 0x42, 0x75, 0x2a, 0x22, 0x4d, 0x7b, 0x55,
  0x2e, 0x69, 0x3a, 0x3f };
str =

  "\ufffd\u6d5a\u7dbb\ufffd\ufffd\uff7f\ufffd\ufffd\uff75\uff99\ufffd\uff6c\ufffd\u21d2\u7fa1\ufffd\u9396";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x30, 0x0a, 0x26, 0x66, 0x50, 0x40, 0x74, 0x40, 0x77,
  0x0b, 0x6e, 0x59, 0x2a, 0x57, 0x72, 0x57, 0x23, 0x58, 0x26, 0x3d, 0x72,
  0x1b, 0x24, 0x42, 0x2b, 0x64, 0x29, 0x22, 0x74, 0x76, 0x39 };
str = "0\u000a&fP@t@w\u000bnY*WrW#X&=r\ufffd\ufffd\ufffd\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x73, 0x3b, 0x21, 0x26, 0x1b, 0x28, 0x4a, 0x66, 0x79,
  0x4d, 0x56, 0x7e, 0x3b, 0x7c, 0x51, 0x2f, 0x33, 0x6a, 0x69, 0x75, 0x75,
  0x24, 0x2a, 0x2e, 0x7a, 0x43, 0x55, 0x46, 0x4e };
str = "s;!&fyMV\u203e;|Q/3jiuu$*.zCUFN";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x7e, 0x66, 0x6a, 0x22, 0x40, 0x7e, 0x22, 0x03, 0x3c,
  0x33, 0x55, 0x23, 0x35, 0x1b, 0x28, 0x4a, 0x43, 0x55, 0x7c, 0x50, 0x42,
  0x77, 0x39, 0x1b, 0x28, 0x49, 0x55, 0x79, 0x37, 0x3c };
str = "~fj\"@~\"\u0003<3U#5CU|PBw9\uff95\ufffd\uff77\uff7c";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x26, 0x5f, 0x5d, 0x30, 0x1b, 0x28, 0x48, 0x46, 0x46,
  0x5f, 0x3e, 0x09, 0x79, 0x1b, 0x28, 0x49, 0x20, 0x6a, 0x6a, 0x75, 0x1b,
  0x24, 0x40, 0x27, 0x74, 0x76, 0x2f, 0x5a, 0x3b };
str = "&_]0\ufffd(HFF_>\u0009y\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u6523";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x65 };
str = "e";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x4a, 0x48, 0x63, 0x1b, 0x28, 0x4a, 0x1b,
  0x28, 0x49, 0x6c, 0x25, 0x2d, 0x7c, 0x41, 0x37, 0x33, 0x7d, 0x52, 0x7d,
  0x28, 0x65, 0x73, 0x3b, 0x5d, 0x48 };
str =

  "Hc\ufffd\ufffd\uff65\uff6d\ufffd\uff81\uff77\uff73\ufffd\uff92\ufffd\uff68\ufffd\ufffd\uff7b\uff9d\uff88";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x21 };
str = "!";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x44, 0x4f, 0x7a, 0x0b, 0x7b, 0x34, 0x20, 0x70, 0x4e,
  0x62, 0x27 };
str = "DOz\u000b\u007b4 pNb'";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x76, 0x37, 0x4a, 0x43, 0x7c, 0x2a, 0x3f, 0x7c, 0x62,
  0x20, 0x7c, 0x43, 0x67, 0x74 };
str = "v7JC|*?|b |Cgt";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x61, 0x78, 0x58, 0x5c, 0x30, 0x66, 0x54, 0x74, 0x4b,
  0x2b, 0x55, 0x7b, 0x4c, 0x3b, 0x4a, 0x64, 0x2c, 0x70, 0x1b, 0x28, 0x4a,
  0x45, 0x21, 0x21, 0x65, 0x3c, 0x26, 0x3e, 0x76 };
str = "axX\\0fTtK+U\u007bL;Jd\u002cpE!!e<&>v";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1d, 0x68, 0x73, 0x2e, 0x23, 0x4c, 0x70, 0x2d, 0x7c,
  0x23, 0x6a, 0x1b, 0x28, 0x48 };
str = "\u001dhs.#Lp-|#j\ufffd(H";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x40, 0x62, 0x2c, 0x6b, 0x48, 0x23, 0x45,
  0x61, 0x39, 0x32, 0x4a, 0x67, 0x64, 0x32, 0x67, 0x78, 0x76, 0x49, 0x78,
  0x1b, 0x28, 0x48, 0x3d, 0x33, 0x76, 0x51, 0x12, 0x1b, 0x28, 0x48, 0x52,
  0x1b, 0x24, 0x40, 0x48, 0x32 };
str =

  "\u7699\u8a52\uff25\u754a\u79d1\u822e\u7259\ufffd\u847a\ufffd\ufffd\u8e74\ufffd\ufffd\ufffd\ufffd\ufffd\u4f10";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x42, 0x53, 0x53, 0x75, 0x28, 0x67 };
str = "SSu(g";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x76, 0x64, 0x3f, 0x2c, 0x7d, 0x3d, 0x68, 0x50, 0x5a,
  0x32, 0x6a, 0x1b, 0x28, 0x49 };
str = "vd?\u002c}=hPZ2j";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x28, 0x48, 0x24, 0x3a, 0x40, 0x72, 0x31, 0x0d,
  0x4d, 0x7e, 0x5f, 0x24, 0x3a, 0x26, 0x6c, 0x62, 0x6d, 0x52 };
str = "\ufffd(H$:@r1\u000dM~_$:&lbmR";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x1b, 0x24, 0x40, 0x5a, 0x56, 0x6e, 0x23, 0x15, 0x3b,
  0x55, 0x42, 0x49, 0x65, 0x74, 0x5d, 0x64, 0x64, 0x5d, 0x6d, 0x75, 0x54,
  0x60, 0x1b, 0x28, 0x48, 0x60, 0x48, 0x46 };
str =

  "\u65c4\u9051\ufffd\u5e2b\u8235\u7e8c\u6c1b\u7c5f\u9021\u58dc\ufffd\ufffd\u7317\ufffd";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
bytes = new byte[] { 0x62, 0x42, 0x58, 0x58, 0x2b, 0x77, 0x62, 0x78, 0x28,
  0x53, 0x52, 0x1b, 0x28, 0x42, 0x46, 0x60, 0x5f, 0x2e, 0x46, 0x5f, 0x4d,
  0x3c, 0x3f, 0x65 };
str = "bBXX+wbx(SRF`_.F_M<?e";
Assert.assertEquals(
 str,
 Encodings.DecodeToString(charset, bytes));
}
@Test
public void TestIso2022JPEncoder() {
byte[] bytes;
String str;
ICharacterEncoding charset = Encodings.GetEncoding("iso-2022-jp");
str = "\u789a";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x62, 0x70, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u2171\uff6b\u52d2";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x7c, 0x72, 0x25, 0x29, 0x70, 0x55,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff2f\uff59";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x4f, 0x23, 0x79, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u6e24";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x5e, 0x5f, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u5254\u6b95";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x51, 0x71, 0x5d, 0x4d, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u5f80\u53d9a\u5e1b";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x31, 0x7d, 0x3d, 0x76, 0x1b, 0x28,
  0x42, 0x61, 0x1b, 0x24, 0x42, 0x56, 0x67, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u5b66\uff95\u2534";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x33, 0x58, 0x25, 0x66, 0x28, 0x2a,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff22N\u731d";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x42, 0x1b, 0x28, 0x42, 0x4e,
  0x1b, 0x24, 0x42, 0x60, 0x4c, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u51dd\u76c3";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x36, 0x45, 0x47, 0x56, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u7e35";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x65, 0x5c, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u7409\uff64\u3351";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x4e, 0x30, 0x21, 0x22, 0x2d, 0x48,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u7167\u5eab\u5d1f";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x3e, 0x48, 0x38, 0x4b, 0x56, 0x40,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff4e\uff6a";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x6e, 0x25, 0x27, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff86\u7e35\u6492";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x4b, 0x65, 0x5c, 0x3b, 0x35,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u5c4f\u226b\uff40";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x56, 0x22, 0x22, 0x64, 0x21, 0x2e,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u6d1f\u6adb\u2513";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x5e, 0x26, 0x36, 0x7b, 0x28, 0x2f,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u5b56\u5f41\u51e0";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x79, 0x6a, 0x57, 0x3b, 0x51, 0x5c,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff7b";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x35, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u0013";
bytes = new byte[] { 0x13 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "#\u5957\uff6e\u7ca5";
bytes = new byte[] { 0x23, 0x1b, 0x24, 0x42, 0x45, 0x65, 0x25, 0x67, 0x34,
  0x21, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff92\u5b16\u6bbb";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x61, 0x55, 0x4a, 0x33, 0x4c,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u2513\u0003\u5e7c";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x28, 0x2f, 0x1b, 0x28, 0x42, 0x03,
  0x1b, 0x24, 0x42, 0x4d, 0x44, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u007b";
bytes = new byte[] { 0x7b };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u5e19\u5db9\u5f2f";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x56, 0x65, 0x79, 0x79, 0x57, 0x3f,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "8\uff1c\uff5a";
bytes = new byte[] { 0x38, 0x1b, 0x24, 0x42, 0x21, 0x63, 0x23, 0x7a, 0x1b,
  0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff29";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x49, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff38\u7cdc\u9248";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x58, 0x64, 0x76, 0x6e, 0x6d,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff61";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x21, 0x23, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u7549\u784e\u779e";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x61, 0x3a, 0x7b, 0x3e, 0x62, 0x56,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "H";
bytes = new byte[] { 0x48 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u6ff3\uff8e";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x5f, 0x2b, 0x25, 0x5b, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "F\uff5dL";
bytes = new byte[] { 0x46, 0x1b, 0x24, 0x42, 0x21, 0x51, 0x1b, 0x28, 0x42,
  0x4c };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u7a3d\u5193\uff81";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x37, 0x4e, 0x51, 0x4a, 0x25, 0x41,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff9e\u25bd\uff4f";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x21, 0x2b, 0x22, 0x26, 0x23, 0x6f,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uffe0\uff8d\uff30";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x21, 0x71, 0x25, 0x58, 0x23, 0x50,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff38\u5bec\u7f87";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x58, 0x79, 0x6e, 0x66, 0x34,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u65db";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x5a, 0x59, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff14";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x34, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u676d\uff7f\u751f";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x39, 0x3a, 0x25, 0x3d, 0x40, 0x38,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u771b\uff09\u649a\uff5a\u792a";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x62, 0x46, 0x21, 0x4b, 0x47, 0x32,
  0x23, 0x7a, 0x62, 0x6a, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff39\uff38";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x59, 0x23, 0x58, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u5f3c";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x49, 0x2b, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u7538\u70ae";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x52, 0x34, 0x5f, 0x5c, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u2542\u5bb0";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x28, 0x40, 0x3a, 0x4b, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u6a17";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x43, 0x74, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u55c7\uff78\uff7f";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x54, 0x27, 0x25, 0x2f, 0x25, 0x3d,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff16";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x36, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff5d\uff0c\u2168";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x21, 0x51, 0x21, 0x24, 0x2d, 0x3d,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff4b\uff89\uff42";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x6b, 0x25, 0x4e, 0x23, 0x62,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u7483";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x4d, 0x7e, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff2e\u7b98\uff30";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x4e, 0x64, 0x30, 0x23, 0x50,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff58\u720d";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x78, 0x60, 0x23, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff96\u6cb9";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x68, 0x4c, 0x7d, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u7977\uff10\uff83";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x45, 0x78, 0x23, 0x30, 0x25, 0x46,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff9e\u76e3\uff31\uff80";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x21, 0x2b, 0x34, 0x46, 0x23, 0x51,
  0x25, 0x3f, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u65db\u6771\u695c\u5c28";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x5a, 0x59, 0x45, 0x6c, 0x5c, 0x35,
  0x55, 0x78, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "/\uff09\u6ea2\u5c4f";
bytes = new byte[] { 0x2f, 0x1b, 0x24, 0x42, 0x21, 0x4b, 0x30, 0x6e, 0x56,
  0x22, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u5c53\u6703\u7582";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x55, 0x7e, 0x50, 0x72, 0x61, 0x4a,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u5371\u773a\u6c5c";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x34, 0x6d, 0x44, 0x2f, 0x7a, 0x5c,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff71\u6eef";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x22, 0x5e, 0x7c, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff14";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x34, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u64d2\u5f17\u5ed0\u6ce5";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x5a, 0x22, 0x4a, 0x26, 0x56, 0x7d,
  0x45, 0x25, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff7f\u7aaaa\u0007";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x3d, 0x37, 0x26, 0x1b, 0x28,
  0x42, 0x61, 0x07 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff8f\u5e3d\u5f2f";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x5e, 0x4b, 0x39, 0x57, 0x3f,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u7a42\uff0e\u797a";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x4a, 0x66, 0x21, 0x25, 0x63, 0x32,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff9a\u5973\uff5b";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x6c, 0x3d, 0x77, 0x21, 0x50,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff8b";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x52, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff13\u53eb\u7b49";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x33, 0x36, 0x2b, 0x45, 0x79,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff79";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x31, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u2010\u751a\u9b54";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x21, 0x3e, 0x3f, 0x53, 0x4b, 0x62,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u759a\u931a\uff51\uff10";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x61, 0x4c, 0x6f, 0x23, 0x23, 0x71,
  0x23, 0x30, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff94\u7e93";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x64, 0x65, 0x77, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff02\u2460\u2500";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x7c, 0x7e, 0x2d, 0x21, 0x28, 0x21,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff43\u88ae\u62ca\uff10\uff8d";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x63, 0x6a, 0x59, 0x59, 0x43,
  0x23, 0x30, 0x25, 0x58, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u2235\u6609";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x22, 0x68, 0x7a, 0x37, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u75c2\u7d17\u2282";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x61, 0x50, 0x3c, 0x53, 0x22, 0x3e,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff0e\uff13\u76b8";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x21, 0x25, 0x23, 0x33, 0x62, 0x30,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff86(";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x4b, 0x1b, 0x28, 0x42, 0x28 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "1\uff39\u61f4";
bytes = new byte[] { 0x31, 0x1b, 0x24, 0x42, 0x23, 0x59, 0x58, 0x73, 0x1b,
  0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff38\u7136\u5631";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x58, 0x41, 0x33, 0x3e, 0x7c,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u9237";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x38, 0x5a, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u58f9\u6821";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x54, 0x65, 0x39, 0x3b, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "&\u6434\u81068\uff6f";
bytes = new byte[] { 0x26, 0x1b, 0x24, 0x42, 0x59, 0x6b, 0x40, 0x48, 0x1b,
  0x28, 0x42, 0x38, 0x1b, 0x24, 0x42, 0x25, 0x43, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff2a\u7669";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x4a, 0x61, 0x7a, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff40\u564e\u5271";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x21, 0x2e, 0x53, 0x59, 0x51, 0x7b,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff02";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x7c, 0x7e, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u9920\u5852\uff6f";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x71, 0x36, 0x54, 0x4d, 0x25, 0x43,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u75f0";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x61, 0x62, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff58\u7620";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x23, 0x78, 0x61, 0x6b, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff69\u7699\uff83";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x25, 0x25, 0x62, 0x2c, 0x25, 0x46,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u254b";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x28, 0x36, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u6dc6\u5e47\uff22";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x5e, 0x42, 0x56, 0x73, 0x23, 0x42,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u70ba\u50e3";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x30, 0x59, 0x51, 0x29, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u5d69\uff15\u57fc";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x3f, 0x73, 0x23, 0x35, 0x3a, 0x6b,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u4f9d\u2640\u54e8\u5957";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x30, 0x4d, 0x21, 0x6a, 0x3e, 0x25,
  0x45, 0x65, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u5189";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x51, 0x47, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\uff0f\uff4a\uff94\u7c9f";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x21, 0x3f, 0x23, 0x6a, 0x25, 0x64,
  0x30, 0x40, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u727d";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x38, 0x23, 0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u6fe0\u2520";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x39, 0x6a, 0x28, 0x37, 0x1b, 0x28,
  0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
str = "\u5f7c\u51f1\u7e35";
bytes = new byte[] { 0x1b, 0x24, 0x42, 0x48, 0x60, 0x33, 0x2e, 0x65, 0x5c,
  0x1b, 0x28, 0x42 };
TestCommon.AssertByteArraysEqual(
  bytes,
  Encodings.EncodeToBytes(str, charset));
}
}
